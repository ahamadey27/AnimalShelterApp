@page "/medications"
@using AnimalShelterApp.Shared
@inject FirestoreService FirestoreService
@inject AuthService AuthService

<h3>Medications</h3>

@if (isLoading)
{
    <p>Loading medications...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Default Dosage</th>
                <th>Instructions</th>
                <th>Storage</th>
                <th>Handling</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var med in medications)
            {
                <tr>
                    <td>@med.Name</td>
                    <td>@med.DefaultDosage</td>
                    <td>@med.Instructions</td>
                    <td>
                        @if (!string.IsNullOrEmpty(med.StorageInstructions))
                        {
                            <small class="text-muted">@med.StorageInstructions</small>
                        }
                        else
                        {
                            <small class="text-muted">-</small>
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(med.HandlingInstructions))
                        {
                            <small class="text-muted">@med.HandlingInstructions</small>
                        }
                        else
                        {
                            <small class="text-muted">-</small>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditMedication(med)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteMedication(med.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h5>@(editingMedication == null ? "Add Medication" : "Edit Medication")</h5>
    <EditForm Model="editingMedication" OnValidSubmit="SaveMedication">
        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Medication Name</label>
                <InputText @bind-Value="editingMedication!.Name" class="form-control" placeholder="Enter medication name" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Default Dosage</label>
                <InputText @bind-Value="editingMedication!.DefaultDosage" class="form-control" placeholder="e.g., 250mg, 5ml" />
            </div>
        </div>
        
        <div class="mb-3">
            <label class="form-label">Administration Instructions</label>
            <InputTextArea @bind-Value="editingMedication!.Instructions" class="form-control" rows="2" placeholder="e.g., Give with food, twice daily" />
        </div>
        
        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Storage Instructions</label>
                <InputTextArea @bind-Value="editingMedication!.StorageInstructions" class="form-control" rows="2" placeholder="e.g., Refrigerate, Store at room temperature, Keep in dark place" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Handling Instructions</label>
                <InputTextArea @bind-Value="editingMedication!.HandlingInstructions" class="form-control" rows="2" placeholder="e.g., Shake well before use, Do not crush, Use within 30 days" />
            </div>
        </div>
        
        <div class="d-flex gap-2">
            <button class="btn btn-success" type="submit">Save Medication</button>
            @if (editingMedication != null && !string.IsNullOrEmpty(editingMedication.Id))
            {
                <button class="btn btn-secondary" type="button" @onclick="CancelEdit">Cancel</button>
            }
        </div>
    </EditForm>
}

@code {
    private List<Medication> medications = new();
    private Medication editingMedication = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadMedications();
    }

    private async Task LoadMedications()
    {
        isLoading = true;
        if (AuthService.CurrentUser?.ShelterId != null && AuthService.Token != null)
        {
            medications = await FirestoreService.GetMedicationsAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
        }
        isLoading = false;
        editingMedication = new Medication();
    }

    private void EditMedication(Medication med)
    {
        editingMedication = new Medication
        {
            Id = med.Id,
            Name = med.Name,
            DefaultDosage = med.DefaultDosage,
            Instructions = med.Instructions,
            StorageInstructions = med.StorageInstructions,
            HandlingInstructions = med.HandlingInstructions
        };
    }

    private async Task SaveMedication()
    {
        if (AuthService.CurrentUser?.ShelterId == null || AuthService.Token == null) return;

        if (string.IsNullOrWhiteSpace(editingMedication.Id))
        {
            // New medication
            editingMedication.Id = Guid.NewGuid().ToString("N").Substring(0, 8);
            await FirestoreService.CreateMedicationAsync(AuthService.CurrentUser.ShelterId, editingMedication, AuthService.Token);
        }
        else
        {
            // Update
            await FirestoreService.UpdateMedicationAsync(AuthService.CurrentUser.ShelterId, editingMedication, AuthService.Token);
        }
        await LoadMedications();
    }

    private async Task DeleteMedication(string id)
    {
        if (AuthService.CurrentUser?.ShelterId == null || AuthService.Token == null) return;
        await FirestoreService.DeleteMedicationAsync(AuthService.CurrentUser.ShelterId, id, AuthService.Token);
        await LoadMedications();
    }

    private void CancelEdit()
    {
        editingMedication = new Medication();
    }
}