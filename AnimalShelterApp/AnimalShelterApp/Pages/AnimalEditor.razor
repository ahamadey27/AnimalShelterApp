@page "/animals/add"
@page "/animals/edit/{AnimalId}"
@using AnimalShelterApp.Services
@using AnimalShelterApp.Shared
@using System.IO
@using System.Text.Json
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject FirestoreService FirestoreService
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<h3>@(string.IsNullOrEmpty(AnimalId) ? "Add New Animal" : "Edit Animal")</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (animal == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="@animal" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="mb-3">
                    <label for="photoUpload" class="form-label">Photo</label>
                    <div class="card">
                        <div class="image-upload-container">
                            @if (!string.IsNullOrEmpty(animal.PhotoUrl))
                            {
                                <img src="@animal.PhotoUrl" class="card-img-top upload-preview" alt="Animal Photo">
                                <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 m-2" 
                                        @onclick="RemovePhoto">
                                    <span class="oi oi-x"></span>
                                </button>
                            }
                            else
                            {
                                <div class="upload-placeholder d-flex flex-column justify-content-center align-items-center">
                                    <span class="oi oi-image text-muted mb-2" style="font-size: 3rem;"></span>
                                    <span>Click to upload photo</span>
                                </div>
                            }
                            <InputFile id="photoUpload" OnChange="HandlePhotoSelected" class="photo-input" accept=".jpg,.jpeg,.png" />
                        </div>
                    </div>
                    @if (uploadError != null)
                    {
                        <div class="text-danger mt-1">@uploadError</div>
                    }
                </div>
            </div>
            
            <div class="col-md-8">
                <div class="mb-3">
                    <label for="animalId" class="form-label">Animal ID</label>
                    <div class="input-group">
                        <InputText id="animalId" @bind-Value="manualId" class="form-control" placeholder="Enter animal ID manually" disabled="@autoAssignId" @onkeypress="HandleKeyPress" />
                        <span class="input-group-text">
                            <InputCheckbox id="autoAssignId" @bind-Value="autoAssignId" class="form-check-input" />
                            <label class="form-check-label ms-2" for="autoAssignId">Auto Assign</label>
                        </span>
                    </div>
                    @if (idExistsWarning)
                    {
                        <div class="text-warning mt-1">This animal ID already exists. Please choose a different ID.</div>
                    }
                </div>

                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" @bind-Value="animal.Name" class="form-control" placeholder="Enter animal name" @onkeypress="HandleKeyPress" />
                    <ValidationMessage For="@(() => animal.Name)" />
                </div>
                
                <div class="row mb-3">
                    <div class="col">
                        <label for="species" class="form-label">Species</label>
                        <input id="species" list="species-list" @bind="animal.Species" @bind:event="oninput" @onchange="() => UpdateBreedSuggestions(animal.Species)" class="form-control" />
                        <datalist id="species-list">
                            @foreach (var species in speciesSuggestions)
                            {
                                <option value="@species"></option>
                            }
                        </datalist>
                        <ValidationMessage For="@(() => animal.Species)" />
                    </div>
                    <div class="col">
                        <label for="breed" class="form-label">Breed</label>
                        <input id="breed" list="breed-list" @bind="animal.Breed" class="form-control" />
                        <datalist id="breed-list">
                            @foreach (var breed in breedSuggestions)
                            {
                                <option value="@breed"></option>
                            }
                        </datalist>
                        <ValidationMessage For="@(() => animal.Breed)" />
                    </div>
                    <div class="col">
                        <label for="color" class="form-label">Color</label>
                        <InputText id="color" @bind-Value="animal.Color" class="form-control" placeholder="Enter animal color" @onkeypress="HandleKeyPress" />
                        <ValidationMessage For="@(() => animal.Color)" />
                    </div>
                </div>
                
                <div class="mb-3">
                    <label for="dob" class="form-label">Date of Birth (approximate is okay)</label>
                    <InputDate id="dob" @bind-Value="animal.DateOfBirth" class="form-control" />
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-8">
                        <label for="weight" class="form-label">Weight</label>
                        <InputNumber id="weight" @bind-Value="animal.Weight" class="form-control" placeholder="Enter weight" step="0.1" @onkeypress="HandleKeyPress" />
                        <ValidationMessage For="@(() => animal.Weight)" />
                    </div>
                    <div class="col-md-4">
                        <label for="weightUnit" class="form-label">Unit</label>
                        <InputSelect id="weightUnit" @bind-Value="animal.WeightUnit" class="form-select">
                            <option value="lbs">Pounds (lbs)</option>
                            <option value="kg">Kilograms (kg)</option>
                        </InputSelect>
                    </div>
                </div>
                
                <div class="form-check mb-3">
                    <InputCheckbox id="isActive" @bind-Value="animal.IsActive" class="form-check-input" />
                    <label class="form-check-label" for="isActive">
                        Currently in shelter (uncheck if adopted or transferred)
                    </label>
                </div>
            </div>
        </div>
        
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save Animal</span>
                }
            </button>
        </div>
    </EditForm>

    @if (IsEditMode)
    {
        <hr />

        <h4>Medication Schedule</h4>

        @if (scheduledDoses == null)
        {
            <p><em>Loading schedule...</em></p>
        }
        else
        {
            <!-- Display Existing Doses -->
            @if (scheduledDoses.Any())
            {
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Medication</th>
                            <th>Dosage</th>
                            <th>Time</th>
                            <th>Schedule</th>
                            <th>Notes</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var dose in scheduledDoses)
                        {
                            var medication = medications?.FirstOrDefault(m => m.Id == dose.MedicationId);
                            <tr>
                                <td>
                                    <div>
                                        <strong>@(medication?.Name ?? "Unknown")</strong>
                                        @if (medication != null && (!string.IsNullOrEmpty(medication.StorageInstructions) || !string.IsNullOrEmpty(medication.HandlingInstructions)))
                                        {
                                            <div class="mt-1">
                                                @if (!string.IsNullOrEmpty(medication.StorageInstructions))
                                                {
                                                    <small class="text-primary d-block">
                                                        <i class="oi oi-home" title="Storage"></i> @medication.StorageInstructions
                                                    </small>
                                                }
                                                @if (!string.IsNullOrEmpty(medication.HandlingInstructions))
                                                {
                                                    <small class="text-warning d-block">
                                                        <i class="oi oi-warning" title="Handling"></i> @medication.HandlingInstructions
                                                    </small>
                                                }
                                            </div>
                                        }
                                    </div>
                                </td>
                                <td>@dose.Dosage</td>
                                <td>
                    <div>
                        @if (dose.TimeSlots != null && dose.TimeSlots.Any())
                        {
                            @if (dose.TimeSlots.Count == 1)
                            {
                                <span>@FormatTime12Hour(dose.TimeSlots.First())</span>
                            }
                            else
                            {
                                <div>
                                    <span class="badge bg-secondary">@dose.DosesPerDay doses/day</span>
                                </div>
                                <div class="mt-1">
                                    @foreach (var timeSlot in dose.TimeSlots)
                                    {
                                        <small class="d-block text-muted">@FormatTime12Hour(timeSlot)</small>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <span>@FormatTime12Hour(dose.TimeOfDay)</span>
                        }
                        
                        @if (dose.FoodRelationship != FoodRelationship.DoesNotMatter)
                        {
                            <div class="mt-1">
                                <small class="badge bg-warning text-dark">
                                    @dose.FoodRelationship.ToString().Replace("Food", " Food")
                                </small>
                            </div>
                        }
                    </div>
                </td>
                                <td>
                                    <div>
                                        <span class="badge bg-info">@GetRecurrenceDisplayText(dose)</span>
                                        @if (dose.RecurrenceType == RecurrenceType.Weekly && dose.DaysOfWeek.Any())
                                        {
                                            <div class="mt-1">
                                                <small class="text-muted">@GetDaysOfWeekText(dose.DaysOfWeek)</small>
                                            </div>
                                        }
                                        @if (dose.RecurrenceType == RecurrenceType.EveryXDays && dose.RecurrenceInterval > 1)
                                        {
                                            <div class="mt-1">
                                                <small class="text-muted">Every @dose.RecurrenceInterval days</small>
                                            </div>
                                        }
                                    </div>
                                </td>
                                <td>@dose.Notes</td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => EditDose(dose))">
                                            <span class="oi oi-pencil"></span>
                                            <span class="ms-1">Edit</span>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="@(() => DeleteDose(dose))">
                                            <span class="oi oi-trash"></span>
                                            <span class="ms-1">Delete</span>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No medications scheduled for this animal.</p>
            }

            <!-- Add/Edit Dose Form -->
            <div class="card mt-4">
                <div class="card-header">@(isEditingDose ? "Edit Medication" : "Schedule New Medication")</div>
                <div class="card-body">
                    <EditForm Model="newDose" OnValidSubmit="ScheduleDose">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Medication</label>
                            <InputSelect @bind-Value="newDose.MedicationId" class="form-select">
                                <option value="">Select Medication...</option>
                                @if (medications != null)
                                {
                                    @foreach (var med in medications)
                                    {
                                        <option value="@med.Id">@med.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newDose.MedicationId)" />
                            
                            @* Display medication details when selected *@
                            @if (!string.IsNullOrEmpty(newDose.MedicationId) && medications != null)
                            {
                                var selectedMed = medications.FirstOrDefault(m => m.Id == newDose.MedicationId);
                                if (selectedMed != null)
                                {
                                    <div class="mt-2 p-3 bg-light rounded">
                                        <h6 class="mb-2">@selectedMed.Name - Important Information</h6>
                                        @if (!string.IsNullOrEmpty(selectedMed.Instructions))
                                        {
                                            <div class="mb-2">
                                                <strong>Instructions:</strong> @selectedMed.Instructions
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(selectedMed.StorageInstructions))
                                        {
                                            <div class="mb-2 text-primary">
                                                <i class="oi oi-home"></i> <strong>Storage:</strong> @selectedMed.StorageInstructions
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(selectedMed.HandlingInstructions))
                                        {
                                            <div class="text-warning">
                                                <i class="oi oi-warning"></i> <strong>Handling:</strong> @selectedMed.HandlingInstructions
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(selectedMed.DefaultDosage))
                                        {
                                            <div class="mt-2">
                                                <small class="text-muted">Default Dosage: @selectedMed.DefaultDosage</small>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Dosage</label>
                            <InputText @bind-Value="newDose.Dosage" class="form-control" @onkeypress="HandleKeyPress" />
                            <ValidationMessage For="@(() => newDose.Dosage)" />
                        </div>
                        <!-- Enhanced Scheduling Options -->
                        <div class="mb-4">
                            <h6 class="mb-3">Dosing Schedule</h6>
                            
                            <div class="mb-3">
                                <label class="form-label">Number of Doses Per Day</label>
                                <InputNumber @bind-Value="newDose.DosesPerDay" class="form-control" min="1" max="6" @onchange="OnDosesPerDayChanged" @onkeypress="HandleKeyPress" />
                                <div class="form-text">Enter 1-6 doses per day</div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Time Slots</label>
                                @if (newDose.TimeSlots.Any())
                                {
                                    @for (int i = 0; i < newDose.TimeSlots.Count; i++)
                                    {
                                        var index = i; // Capture for closure
                                        <div class="input-group mb-2">
                                            <span class="input-group-text">@(index + 1).</span>
                                            <input type="time" class="form-control" 
                                                   value="@newDose.TimeSlots[index]" 
                                                   @onchange="@((ChangeEventArgs e) => UpdateTimeSlot(index, e.Value?.ToString() ?? ""))"
                                                   @onkeypress="HandleKeyPress" />
                                            @if (newDose.TimeSlots.Count > 1)
                                            {
                                                <button type="button" class="btn btn-outline-danger" @onclick="@(() => RemoveTimeSlot(index))">
                                                    <span class="oi oi-x"></span>
                                                </button>
                                            }
                                        </div>
                                    }
                                }
                                @if (newDose.TimeSlots.Count < newDose.DosesPerDay)
                                {
                                    <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddTimeSlot">
                                        <span class="oi oi-plus"></span> Add Time Slot
                                    </button>
                                }
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Food Relationship</label>
                                <InputSelect @bind-Value="newDose.FoodRelationship" class="form-select">
                                    <option value="@FoodRelationship.DoesNotMatter">Does Not Matter</option>
                                    <option value="@FoodRelationship.WithFood">With Food</option>
                                    <option value="@FoodRelationship.WithoutFood">Without Food (Empty Stomach)</option>
                                    <option value="@FoodRelationship.BeforeMeal">Before Meal (30 min before)</option>
                                    <option value="@FoodRelationship.AfterMeal">After Meal (30 min after)</option>
                                </InputSelect>
                                <div class="form-text">
                                    @GetFoodRelationshipDescription(newDose.FoodRelationship)
                                </div>
                            </div>
                        </div>
                        
                        <!-- Recurring Pattern Section -->
                        <div class="mb-4">
                            <h6 class="mb-3">Recurring Pattern</h6>
                            
                            <div class="mb-3">
                                <label class="form-label">Schedule Type</label>
                                <InputSelect @bind-Value="newDose.RecurrenceType" class="form-select" @onchange="OnRecurrenceTypeChanged">
                                    <option value="@RecurrenceType.Daily">Daily (every day)</option>
                                    <option value="@RecurrenceType.EveryXDays">Every X Days</option>
                                    <option value="@RecurrenceType.Weekly">Weekly (specific days)</option>
                                    <option value="@RecurrenceType.BiWeekly">Bi-Weekly (every 2 weeks)</option>
                                    <option value="@RecurrenceType.Monthly">Monthly</option>
                                    <option value="@RecurrenceType.AsNeeded">As Needed (PRN)</option>
                                </InputSelect>
                            </div>
                            
                            @if (newDose.RecurrenceType == RecurrenceType.EveryXDays)
                            {
                                <div class="mb-3">
                                    <label class="form-label">Every how many days?</label>
                                    <InputNumber @bind-Value="newDose.RecurrenceInterval" class="form-control" min="1" max="30" @onkeypress="HandleKeyPress" />
                                    <div class="form-text">Enter a number between 1-30 days</div>
                                </div>
                            }
                            
                            @if (newDose.RecurrenceType == RecurrenceType.Weekly)
                            {
                                <div class="mb-3">
                                    <label class="form-label">Days of the Week</label>
                                    <div class="row">
                                        @foreach (DayOfWeek day in Enum.GetValues<DayOfWeek>())
                                        {
                                            <div class="col-md-4 col-6 mb-2">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" 
                                                           checked="@(newDose.DaysOfWeek.Contains(day))"
                                                           @onchange="@((ChangeEventArgs e) => ToggleDayOfWeek(day, (bool)e.Value!))" 
                                                           id="day-@day" />
                                                    <label class="form-check-label" for="day-@day">
                                                        @day.ToString()
                                                    </label>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    @if (!newDose.DaysOfWeek.Any())
                                    {
                                        <div class="form-text text-warning">Please select at least one day of the week</div>
                                    }
                                </div>
                            }
                            
                            @if (newDose.RecurrenceType == RecurrenceType.AsNeeded)
                            {
                                <div class="alert alert-info">
                                    <i class="oi oi-info"></i> This medication will be available for "as needed" (PRN) administration and won't appear in daily schedules.
                                </div>
                            }
                        </div>
                        
                        <!-- Duration & Scheduling Section -->
                        <div class="mb-4">
                            <h6 class="mb-3">Duration & Scheduling</h6>
                            
                            <div class="mb-3">
                                <label class="form-label">Start Date</label>
                                @if (isEditingDose)
                                {
                                    <!-- Use plain HTML input to avoid Blazor InputDate binding issues -->
                                    <input type="date" class="form-control" 
                                           value="@editingStartDate"
                                           @onchange="@((ChangeEventArgs e) => OnEditingStartDateChanged(e))" />
                                }
                                else
                                {
                                    <InputDate @bind-Value="StartDateProperty" class="form-control" />
                                }
                                <div class="form-text">When should this medication schedule begin?</div>
                            </div>
                            
                            <div class="mb-3">
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="newDose.IsIndefinite" class="form-check-input" id="indefinite-check" @onchange="OnIndefiniteChanged" />
                                    <label class="form-check-label" for="indefinite-check">
                                        Continue indefinitely (no end date)
                                    </label>
                                </div>
                            </div>
                            
                            @if (!newDose.IsIndefinite)
                            {
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">End Date</label>
                                        @if (isEditingDose)
                                        {
                                            <InputDate @bind-Value="newDose.EndDate" class="form-control" />
                                        }
                                        else
                                        {
                                            <InputDate @bind-Value="EndDateProperty" class="form-control" />
                                        }
                                        <div class="form-text">When should this medication schedule end?</div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Duration (Days)</label>
                                        @if (isEditingDose)
                                        {
                                            <InputNumber @bind-Value="newDose.DurationInDays" class="form-control" min="1" @onkeypress="HandleKeyPress" />
                                        }
                                        else
                                        {
                                            <InputNumber @bind-Value="DurationInDaysProperty" class="form-control" min="1" @onkeypress="HandleKeyPress" />
                                        }
                                        <div class="form-text">Alternative: specify number of days</div>
                                    </div>
                                </div>
                                
                                @if (newDose.EndDate.HasValue && newDose.StartDate != default)
                                {
                                    var calculatedDays = (newDose.EndDate.Value.Date - newDose.StartDate.Date).Days + 1;
                                    <div class="alert alert-info">
                                        <i class="oi oi-info"></i> This schedule will run for @calculatedDays day@(calculatedDays != 1 ? "s" : "") 
                                        (from @newDose.StartDate.ToString("MMM dd, yyyy") to @newDose.EndDate.Value.ToString("MMM dd, yyyy"))
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    <i class="oi oi-warning"></i> This medication will continue indefinitely until manually stopped.
                                </div>
                            }
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <InputTextArea @bind-Value="newDose.Notes" class="form-control" @onkeypress="HandleKeyPress" />
                        </div>
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary">
                                @(isEditingDose ? "Update Medication" : "Schedule Dose")
                            </button>
                            @if (isEditingDose)
                            {
                                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">
                                    Cancel
                                </button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
        }
    }
}

<style>
    .image-upload-container {
        position: relative;
        /* Height calculated to align with form fields: Animal ID (58px) + Name (58px) + Species/Breed/Color row (58px) + DOB (58px) + Weight row (58px) + margins */
        height: 375px;
        cursor: pointer;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .upload-preview {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
        border-radius: 8px;
    }
    
    .upload-placeholder {
        width: 100%;
        height: 100%;
        background-color: #f8f9fa;
        border: 2px dashed #dee2e6;
        border-radius: 8px;
    }
    
    .photo-input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }
</style>

@code {
    [Parameter]
    public string? AnimalId { get; set; }

    private Animal animal = new();
    private string manualId = "";
    private bool autoAssignId = true;
    private bool idExistsWarning = false;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool IsEditMode => !string.IsNullOrEmpty(AnimalId);
    private string? uploadError;
    private IBrowserFile? selectedPhoto;
    private string? photoPreviewUrl;
    private string? errorMessage;
    private BreedInfo? breedInfo;
    private List<string> speciesSuggestions = new();
    private List<string> breedSuggestions = new();
    private List<Medication>? medications;
    private List<ScheduledDose>? scheduledDoses;
    private ScheduledDose newDose = new() 
    { 
        DosesPerDay = 1, 
        TimeSlots = new List<string> { "08:00" },
        FoodRelationship = FoodRelationship.DoesNotMatter,
        StartDate = DateTime.Today,
        IsIndefinite = false
    };
    private ScheduledDose? editingDose = null;
    private bool isEditingDose = false;
    private string editingStartDate = "";
    private DateTime lastUsedStartDate = DateTime.Today; // Remember user's preferred start date

    // Property to handle Duration changes with automatic End Date calculation
    private int? DurationInDaysProperty
    {
        get => newDose.DurationInDays;
        set
        {
            newDose.DurationInDays = value;
            
            // Only auto-calculate end date when NOT in editing mode to avoid interference
            if (!isEditingDose && value.HasValue && value > 0 && newDose.StartDate != default)
            {
                newDose.EndDate = newDose.StartDate.AddDays(value.Value - 1);
                StateHasChanged();
            }
            else if (!isEditingDose && !value.HasValue)
            {
                // Clear end date if duration is cleared (but only when creating new doses)
                StateHasChanged();
            }
        }
    }

    // Property to handle End Date changes with automatic Duration calculation
    private DateTime? EndDateProperty
    {
        get => newDose.EndDate;
        set
        {
            newDose.EndDate = value;
            
            // Only auto-calculate duration when NOT in editing mode to avoid interference
            if (!isEditingDose && value.HasValue && newDose.StartDate != default)
            {
                var duration = (value.Value.Date - newDose.StartDate.Date).Days + 1;
                if (duration > 0)
                {
                    newDose.DurationInDays = duration;
                }
                StateHasChanged();
            }
            else if (!isEditingDose && !value.HasValue)
            {
                // Clear duration if end date is cleared (but only when creating new doses)
                newDose.DurationInDays = null;
                StateHasChanged();
            }
        }
    }

    // Property to handle Start Date changes and remember user preference
    private DateTime StartDateProperty
    {
        get
        {
            return newDose.StartDate;
        }
        set
        {
            newDose.StartDate = value;
            
            // Only remember user's preference when creating new doses, not when editing existing ones
            if (!isEditingDose)
            {
                lastUsedStartDate = value; // Remember user's preference for new doses
            }
            
            // Only recalculate end date if duration is set AND we're not in editing mode
            // (to avoid interfering with loaded data)
            if (!isEditingDose && newDose.DurationInDays.HasValue && newDose.DurationInDays > 0)
            {
                var oldEndDate = newDose.EndDate;
                newDose.EndDate = value.AddDays(newDose.DurationInDays.Value - 1);
            }
            
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token))
        {
            var redirectUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/login?redirectUri={Uri.EscapeDataString(redirectUri)}");
            return;
        }

        if (!string.IsNullOrEmpty(AnimalId))
        {
            // Edit mode
            if (!string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId))
            {
                animal = await FirestoreService.GetAnimalAsync(AuthService.CurrentUser.ShelterId, AnimalId, AuthService.Token);
                if (animal == null)
                {
                    errorMessage = "Could not find the specified animal.";
                }
                else
                {
                    autoAssignId = false;
                    manualId = animal.Id;
                }
            }
            else
            {
                errorMessage = "Cannot edit animal because your user has no associated shelter.";
            }
        }
        else
        {
            // Add mode
            autoAssignId = true;
            manualId = "";
            animal = new Animal { Id = "", IsActive = true, Name = "", Species = "", Breed = "", PhotoUrl = "", WeightUnit = "lbs" };
        }

        // Load breed and species data
        breedInfo = await Http.GetFromJsonAsync<BreedInfo>("sample-data/breeds.json");
        if (breedInfo != null)
        {
            speciesSuggestions = breedInfo.Species.Select(s => s.Name).ToList();
        }
        
        // When editing an animal, pre-fill the breed suggestions
        if (animal != null && !string.IsNullOrEmpty(animal.Species))
        {
            UpdateBreedSuggestions(animal.Species);
        }

        // Also load medications and scheduled doses if in edit mode
        if (IsEditMode && AuthService.CurrentUser != null && !string.IsNullOrEmpty(AuthService.Token))
        {
            medications = await FirestoreService.GetMedicationsAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
            await LoadScheduledDoses();
        }
    }

    private void UpdateBreedSuggestions(string speciesName)
    {
        breedSuggestions.Clear();
        var speciesData = breedInfo?.Species.FirstOrDefault(s => s.Name.Equals(speciesName, StringComparison.OrdinalIgnoreCase));
        if (speciesData != null)
        {
            breedSuggestions = speciesData.Breeds;
        }
        StateHasChanged();
    }

    private async Task CheckIfAnimalExists(ChangeEventArgs e)
    {
        var enteredId = e.Value?.ToString();
        // No longer needed: animalIdExists logic removed. Duplicate ID is checked in HandleValidSubmit.
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = null; // Clear previous errors
        
        // Validate weight
        if (animal.Weight.HasValue)
        {
            if (animal.Weight <= 0)
            {
                errorMessage = "Weight must be greater than 0.";
                return;
            }
            
            // Set reasonable weight limits based on unit
            var maxWeight = animal.WeightUnit == "kg" ? 200 : 440; // 200kg or 440lbs
            if (animal.Weight > maxWeight)
            {
                errorMessage = $"Weight seems unusually high. Please verify (max: {maxWeight} {animal.WeightUnit}).";
                return;
            }
        }
        
        if (animal == null || AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId) || string.IsNullOrEmpty(AuthService.Token))
        {
            errorMessage = "Cannot save animal. User or shelter information is missing.";
            return;
        }

        // Assign ID based on manual/auto selection
        if (string.IsNullOrEmpty(AnimalId))
        {
            if (autoAssignId)
            {
                animal.Id = Guid.NewGuid().ToString("N").Substring(0, 8);
            }
            else
            {
                animal.Id = manualId.Trim();
                // Check for duplicate ID
                var existing = await FirestoreService.GetAnimalAsync(AuthService.CurrentUser.ShelterId, animal.Id, AuthService.Token);
                if (existing != null)
                {
                    idExistsWarning = true;
                    errorMessage = "This animal ID already exists. Please choose a different ID.";
                    return;
                }
                else
                {
                    idExistsWarning = false;
                }
            }
        }
        // 1. Handle photo upload first
        if (selectedPhoto != null)
        {
            // 5MB limit for photos
            using var stream = selectedPhoto.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            var photoUrl = await FirestoreService.UploadAnimalPhotoAsync(
                AuthService.CurrentUser.ShelterId,
                animal.Id,
                stream,
                selectedPhoto.Name, // Pass the filename
                selectedPhoto.ContentType,
                AuthService.Token);

            if (photoUrl != null)
            {
                animal.PhotoUrl = photoUrl;
            }
            else
            {
                errorMessage = "Failed to upload photo. Please try again.";
                return; // Stop if photo upload fails
            }
        }

        // 2. Create or Update the animal document
        bool success;
        if (string.IsNullOrEmpty(AnimalId))
        {
            // Create new animal
            success = await FirestoreService.CreateAnimalAsync(AuthService.CurrentUser.ShelterId, animal, AuthService.Token);
        }
        else
        {
            // Update existing animal
            success = await FirestoreService.UpdateAnimalAsync(AuthService.CurrentUser.ShelterId, animal, AuthService.Token);
        }

        if (success)
        {
            NavigationManager.NavigateTo("/animals");
        }
        else
        {
            errorMessage = "Failed to save animal details to the database.";
        }
    }

    private async Task HandlePhotoSelected(InputFileChangeEventArgs e)
    {
        selectedPhoto = e.File;
        // Clear any previous upload errors
        uploadError = null;
        
        // Validate file
        if (selectedPhoto.Size > 5 * 1024 * 1024)
        {
            uploadError = "The selected photo exceeds the maximum size of 5MB.";
            return;
        }
        
        // Preview the selected photo
        try
        {
            var format = "image/jpeg";
            var resizedImageFile = await selectedPhoto.RequestImageFileAsync(format, 800, 600);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            animal.PhotoUrl = imageDataUrl;
        }
        catch (Exception ex)
        {
            uploadError = "Failed to preview image: " + ex.Message;
        }
    }
    
    private void RemovePhoto()
    {
        animal.PhotoUrl = string.Empty;
        selectedPhoto = null;
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/animals");
    }

    private async Task LoadScheduledDoses()
    {
        if (AnimalId != null && AuthService.CurrentUser != null && !string.IsNullOrEmpty(AuthService.Token))
        {
            scheduledDoses = await FirestoreService.GetScheduledDosesForAnimalAsync(AuthService.CurrentUser.ShelterId, AnimalId, AuthService.Token);
        }
    }

    private async Task ScheduleDose()
    {
        if (animal == null || AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token)) return;

        bool success;
        
        if (isEditingDose && editingDose != null)
        {
            // Update existing dose
            newDose.AnimalId = animal.Id;
            success = await FirestoreService.UpdateScheduledDoseAsync(AuthService.CurrentUser.ShelterId, newDose, AuthService.Token);
        }
        else
        {
            // Create new dose
            newDose.Id = Guid.NewGuid().ToString("N").Substring(0, 12);
            newDose.AnimalId = animal.Id;
            success = await FirestoreService.CreateScheduledDoseAsync(AuthService.CurrentUser.ShelterId, newDose, AuthService.Token);
        }

        if (success)
        {
            // Reset form and editing state
            isEditingDose = false;
            editingDose = null;
            newDose = new() 
            { 
                DosesPerDay = 1, 
                TimeSlots = new List<string> { "08:00" },
                FoodRelationship = FoodRelationship.DoesNotMatter,
                StartDate = lastUsedStartDate, // Use user's preferred date
                IsIndefinite = false
            }; // Reset form
            await LoadScheduledDoses(); // Refresh list
            StateHasChanged();
        }
    }

    // Helper methods for weight conversion
    private decimal ConvertWeight(decimal weight, string fromUnit, string toUnit)
    {
        if (fromUnit == toUnit) return weight;
        
        if (fromUnit == "lbs" && toUnit == "kg")
            return Math.Round(weight * 0.453592m, 1);
        
        if (fromUnit == "kg" && toUnit == "lbs")
            return Math.Round(weight * 2.20462m, 1);
            
        return weight;
    }

    private string GetWeightDisplay(decimal? weight, string unit)
    {
        if (!weight.HasValue) return "Not recorded";
        return $"{weight:F1} {unit}";
    }

    // Helper methods for recurring patterns
    private void OnRecurrenceTypeChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<RecurrenceType>(e.Value?.ToString(), out var recurrenceType))
        {
            newDose.RecurrenceType = recurrenceType;
            
            // Reset related fields when changing recurrence type
            if (recurrenceType != RecurrenceType.EveryXDays)
            {
                newDose.RecurrenceInterval = 1;
            }
            
            if (recurrenceType != RecurrenceType.Weekly)
            {
                newDose.DaysOfWeek.Clear();
            }
            
            StateHasChanged();
        }
    }

    private void ToggleDayOfWeek(DayOfWeek day, bool isChecked)
    {
        if (isChecked)
        {
            if (!newDose.DaysOfWeek.Contains(day))
            {
                newDose.DaysOfWeek.Add(day);
            }
        }
        else
        {
            newDose.DaysOfWeek.Remove(day);
        }
    }

    // Helper methods for displaying recurring patterns
    private string GetRecurrenceDisplayText(ScheduledDose dose)
    {
        return dose.RecurrenceType switch
        {
            RecurrenceType.Daily => "Daily",
            RecurrenceType.EveryXDays => dose.RecurrenceInterval == 2 ? "Every Other Day" : $"Every {dose.RecurrenceInterval} Days",
            RecurrenceType.Weekly => "Weekly",
            RecurrenceType.BiWeekly => "Bi-Weekly",
            RecurrenceType.Monthly => "Monthly",
            RecurrenceType.AsNeeded => "As Needed (PRN)",
            _ => "Unknown"
        };
    }

    private string GetDaysOfWeekText(List<DayOfWeek> daysOfWeek)
    {
        if (!daysOfWeek.Any()) return "";
        
        // Sort days starting with Sunday
        var sortedDays = daysOfWeek.OrderBy(d => (int)d).ToList();
        
        // Abbreviate day names for compact display
        var dayAbbreviations = sortedDays.Select(d => d switch
        {
            DayOfWeek.Sunday => "Sun",
            DayOfWeek.Monday => "Mon",
            DayOfWeek.Tuesday => "Tue",
            DayOfWeek.Wednesday => "Wed",
            DayOfWeek.Thursday => "Thu",
            DayOfWeek.Friday => "Fri",
            DayOfWeek.Saturday => "Sat",
            _ => d.ToString()
        });
        
        return string.Join(", ", dayAbbreviations);
    }

    // Enhanced Scheduling Options methods
    private void OnDosesPerDayChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var dosesPerDay))
        {
            newDose.DosesPerDay = Math.Max(1, Math.Min(6, dosesPerDay)); // Clamp between 1-6
            
            // Adjust TimeSlots list to match DosesPerDay
            while (newDose.TimeSlots.Count < newDose.DosesPerDay)
            {
                newDose.TimeSlots.Add("08:00"); // Default time
            }
            while (newDose.TimeSlots.Count > newDose.DosesPerDay)
            {
                newDose.TimeSlots.RemoveAt(newDose.TimeSlots.Count - 1);
            }
            
            StateHasChanged();
        }
    }

    private void AddTimeSlot()
    {
        if (newDose.TimeSlots.Count < newDose.DosesPerDay)
        {
            newDose.TimeSlots.Add("08:00");
            StateHasChanged();
        }
    }

    private void RemoveTimeSlot(int index)
    {
        if (index >= 0 && index < newDose.TimeSlots.Count && newDose.TimeSlots.Count > 1)
        {
            newDose.TimeSlots.RemoveAt(index);
            // Adjust DosesPerDay to match
            newDose.DosesPerDay = newDose.TimeSlots.Count;
            StateHasChanged();
        }
    }

    private void UpdateTimeSlot(int index, string timeValue)
    {
        if (index >= 0 && index < newDose.TimeSlots.Count)
        {
            newDose.TimeSlots[index] = timeValue;
        }
    }

    private string GetFoodRelationshipDescription(FoodRelationship foodRelationship)
    {
        return foodRelationship switch
        {
            FoodRelationship.DoesNotMatter => "Can be given with or without food",
            FoodRelationship.WithFood => "Should be given with food to reduce stomach upset",
            FoodRelationship.WithoutFood => "Should be given on an empty stomach for best absorption",
            FoodRelationship.BeforeMeal => "Give 30 minutes before feeding for optimal effectiveness",
            FoodRelationship.AfterMeal => "Give 30 minutes after feeding to aid digestion",
            _ => "No specific food requirements"
        };
    }

    // Helper method to convert 24-hour time to 12-hour AM/PM format
    private string FormatTime12Hour(string time24Hour)
    {
        if (string.IsNullOrEmpty(time24Hour)) return "";
        
        if (TimeSpan.TryParse(time24Hour, out TimeSpan timeSpan))
        {
            var dateTime = DateTime.Today.Add(timeSpan);
            return dateTime.ToString("h:mm tt"); // h:mm tt gives "8:00 PM" format
        }
        
        return time24Hour; // Return original if parsing fails
    }

    // Edit and Delete methods for scheduled doses
    private void EditDose(ScheduledDose dose)
    {
        editingDose = dose;
        isEditingDose = true;
        
        // Create a completely new ScheduledDose object with the existing dose's values
        // This ensures clean binding without interference from property setters
        newDose = new ScheduledDose
        {
            Id = dose.Id,
            AnimalId = dose.AnimalId,
            MedicationId = dose.MedicationId,
            Dosage = dose.Dosage,
            TimeOfDay = dose.TimeOfDay,
            Notes = dose.Notes,
            RecurrenceType = dose.RecurrenceType,
            RecurrenceInterval = dose.RecurrenceInterval,
            DaysOfWeek = new List<DayOfWeek>(dose.DaysOfWeek),
            DosesPerDay = dose.DosesPerDay,
            TimeSlots = new List<string>(dose.TimeSlots ?? new List<string> { dose.TimeOfDay ?? "08:00" }),
            FoodRelationship = dose.FoodRelationship,
            // Date fields - copy exactly as they are
            IsIndefinite = dose.IsIndefinite,
            StartDate = dose.StartDate,
            EndDate = dose.EndDate,
            DurationInDays = dose.DurationInDays
        };
        
        // Initialize the editing start date string
        editingStartDate = newDose.StartDate.ToString("yyyy-MM-dd");
        
        // Force UI update to reflect the loaded state
        StateHasChanged();
    }

    private async Task DeleteDose(ScheduledDose dose)
    {
        if (animal == null || AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token)) return;

        // Simple confirmation (you could add a modal for better UX)
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this medication schedule for {medications?.FirstOrDefault(m => m.Id == dose.MedicationId)?.Name ?? "Unknown"}?");
        
        if (confirmed)
        {
            var success = await FirestoreService.DeleteScheduledDoseAsync(AuthService.CurrentUser.ShelterId, dose.Id, AuthService.Token);
            if (success)
            {
                await LoadScheduledDoses(); // Refresh list
                StateHasChanged();
            }
        }
    }

    private void CancelEdit()
    {
        isEditingDose = false;
        editingDose = null;
        
        // Reset form to defaults
        newDose = new() 
        { 
            DosesPerDay = 1, 
            TimeSlots = new List<string> { "08:00" },
            FoodRelationship = FoodRelationship.DoesNotMatter,
            StartDate = lastUsedStartDate, // Use user's preferred date
            IsIndefinite = false
        };
        
        StateHasChanged();
    }

    // Prevent Enter key from submitting form when typing in input fields
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await JSRuntime.InvokeVoidAsync("eval", "event.preventDefault()");
        }
    }

    // Date and duration handler methods
    private void OnStartDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var selectedDate))
        {
            newDose.StartDate = selectedDate;
            
            // Only remember user preference when creating new doses
            if (!isEditingDose)
            {
                lastUsedStartDate = selectedDate;
            }
            
            StateHasChanged();
        }
    }

    private void OnEditingStartDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newDate))
        {
            // Update both the string and the actual object
            editingStartDate = newDate.ToString("yyyy-MM-dd");
            newDose.StartDate = newDate;
            
            if (!newDose.IsIndefinite && newDose.DurationInDays.HasValue)
            {
                newDose.EndDate = newDate.AddDays(newDose.DurationInDays.Value);
            }
            StateHasChanged();
        }
    }

    private void OnIndefiniteChanged(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out var isIndefinite))
        {
            newDose.IsIndefinite = isIndefinite;
            
            if (isIndefinite)
            {
                // Clear end date and duration when set to indefinite
                newDose.EndDate = null;
                newDose.DurationInDays = null;
            }
            else
            {
                // When switching from indefinite to finite, restore a reasonable default if no end date exists
                if (!newDose.EndDate.HasValue && !newDose.DurationInDays.HasValue)
                {
                    // Default to 7 days if nothing is set
                    newDose.DurationInDays = 7;
                    if (newDose.StartDate != default)
                    {
                        newDose.EndDate = newDose.StartDate.AddDays(6); // 7 days total
                    }
                }
            }
            
            StateHasChanged();
        }
    }
}