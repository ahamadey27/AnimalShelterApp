@page "/animals/add"
@page "/animals/edit/{AnimalId}"
@using AnimalShelterApp.Services
@using AnimalShelterApp.Shared
@using System.IO
@using System.Text.Json
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject FirestoreService FirestoreService
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<h3>@(string.IsNullOrEmpty(AnimalId) ? "Add New Animal" : "Edit Animal")</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (animal == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="@animal" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="mb-3">
                    <label for="photoUpload" class="form-label">Photo</label>
                    <div class="card">
                        <div class="image-upload-container">
                            @if (!string.IsNullOrEmpty(animal.PhotoUrl))
                            {
                                <img src="@animal.PhotoUrl" class="card-img-top upload-preview" alt="Animal Photo">
                                <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 m-2" 
                                        @onclick="RemovePhoto">
                                    <span class="oi oi-x"></span>
                                </button>
                            }
                            else
                            {
                                <div class="upload-placeholder d-flex flex-column justify-content-center align-items-center">
                                    <span class="oi oi-image text-muted mb-2" style="font-size: 3rem;"></span>
                                    <span>Click to upload photo</span>
                                </div>
                            }
                            <InputFile id="photoUpload" OnChange="HandlePhotoSelected" class="photo-input" accept=".jpg,.jpeg,.png" />
                        </div>
                    </div>
                    @if (uploadError != null)
                    {
                        <div class="text-danger mt-1">@uploadError</div>
                    }
                </div>
            </div>
            
            <div class="col-md-8">
                <div class="mb-3">
                    <label for="animalId" class="form-label">Animal ID</label>
                    <div class="input-group">
                        <InputText id="animalId" @bind-Value="manualId" class="form-control" placeholder="Enter animal ID manually" disabled="@autoAssignId" />
                        <span class="input-group-text">
                            <InputCheckbox id="autoAssignId" @bind-Value="autoAssignId" class="form-check-input" />
                            <label class="form-check-label ms-2" for="autoAssignId">Auto Assign</label>
                        </span>
                    </div>
                    @if (idExistsWarning)
                    {
                        <div class="text-warning mt-1">This animal ID already exists. Please choose a different ID.</div>
                    }
                </div>

                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" @bind-Value="animal.Name" class="form-control" placeholder="Enter animal name" />
                    <ValidationMessage For="@(() => animal.Name)" />
                </div>
                
                <div class="row mb-3">
                    <div class="col">
                        <label for="species" class="form-label">Species</label>
                        <input id="species" list="species-list" @bind="animal.Species" @bind:event="oninput" @onchange="() => UpdateBreedSuggestions(animal.Species)" class="form-control" />
                        <datalist id="species-list">
                            @foreach (var species in speciesSuggestions)
                            {
                                <option value="@species"></option>
                            }
                        </datalist>
                        <ValidationMessage For="@(() => animal.Species)" />
                    </div>
                    <div class="col">
                        <label for="breed" class="form-label">Breed</label>
                        <input id="breed" list="breed-list" @bind="animal.Breed" class="form-control" />
                        <datalist id="breed-list">
                            @foreach (var breed in breedSuggestions)
                            {
                                <option value="@breed"></option>
                            }
                        </datalist>
                        <ValidationMessage For="@(() => animal.Breed)" />
                    </div>
                    <div class="col">
                        <label for="color" class="form-label">Color</label>
                        <InputText id="color" @bind-Value="animal.Color" class="form-control" placeholder="Enter animal color" />
                        <ValidationMessage For="@(() => animal.Color)" />
                    </div>
                </div>
                
                <div class="mb-3">
                    <label for="dob" class="form-label">Date of Birth (approximate is okay)</label>
                    <InputDate id="dob" @bind-Value="animal.DateOfBirth" class="form-control" />
                </div>
                
                <div class="form-check mb-3">
                    <InputCheckbox id="isActive" @bind-Value="animal.IsActive" class="form-check-input" />
                    <label class="form-check-label" for="isActive">
                        Currently in shelter (uncheck if adopted or transferred)
                    </label>
                </div>
            </div>
        </div>
        
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save Animal</span>
                }
            </button>
        </div>
    </EditForm>

    @if (IsEditMode)
    {
        <hr />

        <h4>Medication Schedule</h4>

        @if (scheduledDoses == null)
        {
            <p><em>Loading schedule...</em></p>
        }
        else
        {
            <!-- Display Existing Doses -->
            @if (scheduledDoses.Any())
            {
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Medication</th>
                            <th>Dosage</th>
                            <th>Time</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var dose in scheduledDoses)
                        {
                            <tr>
                                <td>@(medications?.FirstOrDefault(m => m.Id == dose.MedicationId)?.Name ?? "Unknown")</td>
                                <td>@dose.Dosage</td>
                                <td>@dose.TimeOfDay</td>
                                <td>@dose.Notes</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No medications scheduled for this animal.</p>
            }

            <!-- Add New Dose Form -->
            <div class="card mt-4">
                <div class="card-header">Schedule New Medication</div>
                <div class="card-body">
                    <EditForm Model="newDose" OnValidSubmit="ScheduleDose">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Medication</label>
                            <InputSelect @bind-Value="newDose.MedicationId" class="form-select">
                                <option value="">Select Medication...</option>
                                @if (medications != null)
                                {
                                    @foreach (var med in medications)
                                    {
                                        <option value="@med.Id">@med.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newDose.MedicationId)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Dosage</label>
                            <InputText @bind-Value="newDose.Dosage" class="form-control" />
                            <ValidationMessage For="@(() => newDose.Dosage)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Time of Day (e.g., 08:00)</label>
                            <InputText @bind-Value="newDose.TimeOfDay" class="form-control" />
                            <ValidationMessage For="@(() => newDose.TimeOfDay)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <InputTextArea @bind-Value="newDose.Notes" class="form-control" />
                        </div>
                        <button type="submit" class="btn btn-primary">Schedule Dose</button>
                    </EditForm>
                </div>
            </div>
        }
    }
}

<style>
    .image-upload-container {
        position: relative;
        height: 200px;
        cursor: pointer;
    }
    
    .upload-preview {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .upload-placeholder {
        width: 100%;
        height: 100%;
        background-color: #f8f9fa;
    }
    
    .photo-input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }
</style>

@code {
    [Parameter]
    public string? AnimalId { get; set; }

    private Animal animal = new();
    private string manualId = "";
    private bool autoAssignId = true;
    private bool idExistsWarning = false;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool IsEditMode => !string.IsNullOrEmpty(AnimalId);
    private string? uploadError;
    private IBrowserFile? selectedPhoto;
    private string? photoPreviewUrl;
    private string? errorMessage;
    private BreedInfo? breedInfo;
    private List<string> speciesSuggestions = new();
    private List<string> breedSuggestions = new();
    private List<Medication>? medications;
    private List<ScheduledDose>? scheduledDoses;
    private ScheduledDose newDose = new();

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token))
        {
            var redirectUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/login?redirectUri={Uri.EscapeDataString(redirectUri)}");
            return;
        }

        if (!string.IsNullOrEmpty(AnimalId))
        {
            // Edit mode
            if (!string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId))
            {
                animal = await FirestoreService.GetAnimalAsync(AuthService.CurrentUser.ShelterId, AnimalId, AuthService.Token);
                if (animal == null)
                {
                    errorMessage = "Could not find the specified animal.";
                }
                else
                {
                    autoAssignId = false;
                    manualId = animal.Id;
                }
            }
            else
            {
                errorMessage = "Cannot edit animal because your user has no associated shelter.";
            }
        }
        else
        {
            // Add mode
            autoAssignId = true;
            manualId = "";
            animal = new Animal { Id = "", IsActive = true, Name = "", Species = "", Breed = "", PhotoUrl = "" };
        }

        // Load breed and species data
        breedInfo = await Http.GetFromJsonAsync<BreedInfo>("sample-data/breeds.json");
        if (breedInfo != null)
        {
            speciesSuggestions = breedInfo.Species.Select(s => s.Name).ToList();
        }
        
        // When editing an animal, pre-fill the breed suggestions
        if (animal != null && !string.IsNullOrEmpty(animal.Species))
        {
            UpdateBreedSuggestions(animal.Species);
        }

        // Also load medications and scheduled doses if in edit mode
        if (IsEditMode && AuthService.CurrentUser != null && !string.IsNullOrEmpty(AuthService.Token))
        {
            medications = await FirestoreService.GetMedicationsAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
            await LoadScheduledDoses();
        }
    }

    private void UpdateBreedSuggestions(string speciesName)
    {
        breedSuggestions.Clear();
        var speciesData = breedInfo?.Species.FirstOrDefault(s => s.Name.Equals(speciesName, StringComparison.OrdinalIgnoreCase));
        if (speciesData != null)
        {
            breedSuggestions = speciesData.Breeds;
        }
        StateHasChanged();
    }

    private async Task CheckIfAnimalExists(ChangeEventArgs e)
    {
        var enteredId = e.Value?.ToString();
        // No longer needed: animalIdExists logic removed. Duplicate ID is checked in HandleValidSubmit.
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = null; // Clear previous errors
        if (animal == null || AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId) || string.IsNullOrEmpty(AuthService.Token))
        {
            errorMessage = "Cannot save animal. User or shelter information is missing.";
            return;
        }

        // Assign ID based on manual/auto selection
        if (string.IsNullOrEmpty(AnimalId))
        {
            if (autoAssignId)
            {
                animal.Id = Guid.NewGuid().ToString("N").Substring(0, 8);
            }
            else
            {
                animal.Id = manualId.Trim();
                // Check for duplicate ID
                var existing = await FirestoreService.GetAnimalAsync(AuthService.CurrentUser.ShelterId, animal.Id, AuthService.Token);
                if (existing != null)
                {
                    idExistsWarning = true;
                    errorMessage = "This animal ID already exists. Please choose a different ID.";
                    return;
                }
                else
                {
                    idExistsWarning = false;
                }
            }
        }
        // 1. Handle photo upload first
        if (selectedPhoto != null)
        {
            // 5MB limit for photos
            using var stream = selectedPhoto.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            var photoUrl = await FirestoreService.UploadAnimalPhotoAsync(
                AuthService.CurrentUser.ShelterId,
                animal.Id,
                stream,
                selectedPhoto.Name, // Pass the filename
                selectedPhoto.ContentType,
                AuthService.Token);

            if (photoUrl != null)
            {
                animal.PhotoUrl = photoUrl;
            }
            else
            {
                errorMessage = "Failed to upload photo. Please try again.";
                return; // Stop if photo upload fails
            }
        }

        // 2. Create or Update the animal document
        bool success;
        if (string.IsNullOrEmpty(AnimalId))
        {
            // Create new animal
            success = await FirestoreService.CreateAnimalAsync(AuthService.CurrentUser.ShelterId, animal, AuthService.Token);
        }
        else
        {
            // Update existing animal
            success = await FirestoreService.UpdateAnimalAsync(AuthService.CurrentUser.ShelterId, animal, AuthService.Token);
        }

        if (success)
        {
            NavigationManager.NavigateTo("/animals");
        }
        else
        {
            errorMessage = "Failed to save animal details to the database.";
        }
    }

    private async Task HandlePhotoSelected(InputFileChangeEventArgs e)
    {
        selectedPhoto = e.File;
        // Clear any previous upload errors
        uploadError = null;
        
        // Validate file
        if (selectedPhoto.Size > 5 * 1024 * 1024)
        {
            uploadError = "The selected photo exceeds the maximum size of 5MB.";
            return;
        }
        
        // Preview the selected photo
        try
        {
            var format = "image/jpeg";
            var resizedImageFile = await selectedPhoto.RequestImageFileAsync(format, 800, 600);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            animal.PhotoUrl = imageDataUrl;
        }
        catch (Exception ex)
        {
            uploadError = "Failed to preview image: " + ex.Message;
        }
    }
    
    private void RemovePhoto()
    {
        animal.PhotoUrl = string.Empty;
        selectedPhoto = null;
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/animals");
    }

    private async Task LoadScheduledDoses()
    {
        if (AnimalId != null && AuthService.CurrentUser != null && !string.IsNullOrEmpty(AuthService.Token))
        {
            scheduledDoses = await FirestoreService.GetScheduledDosesForAnimalAsync(AuthService.CurrentUser.ShelterId, AnimalId, AuthService.Token);
        }
    }

    private async Task ScheduleDose()
    {
        if (animal == null || AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token)) return;

        newDose.Id = Guid.NewGuid().ToString("N").Substring(0, 12);
        newDose.AnimalId = animal.Id;

        var success = await FirestoreService.CreateScheduledDoseAsync(AuthService.CurrentUser.ShelterId, newDose, AuthService.Token);
        if (success)
        {
            newDose = new(); // Reset form
            await LoadScheduledDoses(); // Refresh list
            StateHasChanged();
        }
    }
}