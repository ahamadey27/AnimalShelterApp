@page "/animals/add"
@page "/animals/edit/{AnimalId}"
@using AnimalShelterApp.Services
@using AnimalShelterApp.Shared
@using System.IO
@using System.Text.Json
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject FirestoreService FirestoreService
@inject IJSRuntime JSRuntime

<h3>@(string.IsNullOrEmpty(AnimalId) ? "Add New Animal" : "Edit Animal")</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (animal == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="@animal" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="mb-3">
                    <label for="photoUpload" class="form-label">Photo</label>
                    <div class="card">
                        <div class="image-upload-container">
                            @if (!string.IsNullOrEmpty(animal.PhotoUrl))
                            {
                                <img src="@animal.PhotoUrl" class="card-img-top upload-preview" alt="Animal Photo">
                                <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 m-2" 
                                        @onclick="RemovePhoto">
                                    <span class="oi oi-x"></span>
                                </button>
                            }
                            else
                            {
                                <div class="upload-placeholder d-flex flex-column justify-content-center align-items-center">
                                    <span class="oi oi-image text-muted mb-2" style="font-size: 3rem;"></span>
                                    <span>Click to upload photo</span>
                                </div>
                            }
                            <InputFile id="photoUpload" OnChange="HandlePhotoSelected" class="photo-input" accept=".jpg,.jpeg,.png" />
                        </div>
                    </div>
                    @if (uploadError != null)
                    {
                        <div class="text-danger mt-1">@uploadError</div>
                    }
                </div>
            </div>
            
            <div class="col-md-8">
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" @bind-Value="animal.Name" class="form-control" placeholder="Enter animal name" />
                    <ValidationMessage For="@(() => animal.Name)" />
                </div>
                
                <div class="row mb-3">
                    <div class="col">
                        <label for="species" class="form-label">Species</label>
                        <InputText id="species" @bind-Value="animal.Species" class="form-control" placeholder="Dog, Cat, etc." />
                        <ValidationMessage For="@(() => animal.Species)" />
                    </div>
                    <div class="col">
                        <label for="breed" class="form-label">Breed</label>
                        <InputText id="breed" @bind-Value="animal.Breed" class="form-control" placeholder="Labrador, Siamese, etc." />
                        <ValidationMessage For="@(() => animal.Breed)" />
                    </div>
                </div>
                
                <div class="mb-3">
                    <label for="dob" class="form-label">Date of Birth (approximate is okay)</label>
                    <InputDate id="dob" @bind-Value="animal.DateOfBirth" class="form-control" />
                </div>
                
                <div class="form-check mb-3">
                    <InputCheckbox id="isActive" @bind-Value="animal.IsActive" class="form-check-input" />
                    <label class="form-check-label" for="isActive">
                        Currently in shelter (uncheck if adopted or transferred)
                    </label>
                </div>
            </div>
        </div>
        
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save Animal</span>
                }
            </button>
        </div>
    </EditForm>
}

<style>
    .image-upload-container {
        position: relative;
        height: 200px;
        cursor: pointer;
    }
    
    .upload-preview {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .upload-placeholder {
        width: 100%;
        height: 100%;
        background-color: #f8f9fa;
    }
    
    .photo-input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }
</style>

@code {
    [Parameter]
    public string? AnimalId { get; set; }
    
    private Animal animal = new();
    private bool isLoading = true;
    private bool isSaving = false;
    private bool IsEditMode => !string.IsNullOrEmpty(AnimalId);
    private string? uploadError;
    private IBrowserFile? selectedFile;
    private IBrowserFile? selectedPhoto;
    private string? photoPreviewUrl;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token))
        {
            // Use the current URI for the redirect to handle both add and edit modes correctly
            var redirectUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/login?redirectUri={Uri.EscapeDataString(redirectUri)}");
            return;
        }

        if (!string.IsNullOrEmpty(AnimalId))
        {
            // Edit mode
            if (!string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId))
            {
                animal = await FirestoreService.GetAnimalAsync(AuthService.CurrentUser.ShelterId, AnimalId, AuthService.Token);
                if (animal == null)
                {
                    errorMessage = "Could not find the specified animal.";
                }
            }
            else
            {
                errorMessage = "Cannot edit animal because your user has no associated shelter.";
            }
        }
        else
        {
            // Add mode
            animal = new Animal { Id = Guid.NewGuid().ToString(), IsActive = true, Name = "", Species = "", Breed = "", PhotoUrl = "" };
        }
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = null; // Clear previous errors
        if (animal == null || AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId) || string.IsNullOrEmpty(AuthService.Token))
        {
            errorMessage = "Cannot save animal. User or shelter information is missing.";
            return;
        }

        // 1. Handle photo upload first
        if (selectedPhoto != null)
        {
            // 5MB limit for photos
            using var stream = selectedPhoto.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); 
            var photoUrl = await FirestoreService.UploadAnimalPhotoAsync(AuthService.CurrentUser.ShelterId, animal.Id, stream, selectedPhoto.ContentType, AuthService.Token);
            
            if (photoUrl != null)
            {
                animal.PhotoUrl = photoUrl;
            }
            else
            {
                errorMessage = "Failed to upload photo. Please try again.";
                return; // Stop if photo upload fails
            }
        }

        // 2. Create or Update the animal document
        bool success;
        if (string.IsNullOrEmpty(AnimalId))
        {
            // Create new animal
            success = await FirestoreService.CreateAnimalAsync(AuthService.CurrentUser.ShelterId, animal, AuthService.Token);
        }
        else
        {
            // Update existing animal
            success = await FirestoreService.UpdateAnimalAsync(AuthService.CurrentUser.ShelterId, animal, AuthService.Token);
        }

        if (success)
        {
            NavigationManager.NavigateTo("/animals");
        }
        else
        {
            errorMessage = "Failed to save animal details to the database.";
        }
    }

    private async Task HandlePhotoSelected(InputFileChangeEventArgs e)
    {
        selectedPhoto = e.File;
        if (selectedPhoto != null)
        {
            // Generate a preview URL
            photoPreviewUrl = null; // Clear previous preview
            var format = "image/jpeg";
            if(selectedPhoto.ContentType == "image/png") format = "image/png";

            try
            {
                var imageFile = await selectedPhoto.RequestImageFileAsync(format, 200, 200);
                using var imageStream = imageFile.OpenReadStream(5 * 1024 * 1024); // 5MB limit
                using var memoryStream = new MemoryStream();
                await imageStream.CopyToAsync(memoryStream);
                
                photoPreviewUrl = $"data:{format};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error generating photo preview: {ex.Message}";
            }
        }
    }

    private void RemovePhoto()
    {
        animal.PhotoUrl = null;
        selectedFile = null;
        uploadError = null;
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/animals");
    }
}