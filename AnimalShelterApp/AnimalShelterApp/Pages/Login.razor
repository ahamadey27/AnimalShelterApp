@page "/login"
@using System
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using AnimalShelterApp.Services
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Login</h3>
                </div>
                <div class="card-body">
                    <!-- Demo Credentials Information -->
                    <div class="alert alert-info mb-3">
                        <h6><i class="fas fa-info-circle"></i> Demo Access</h6>
                        <p class="mb-1"><strong>Email:</strong> hamadey@gmail.com</p>
                        <p class="mb-0"><strong>Password:</strong> password123</p>
                        <small class="text-muted">Use these credentials to explore the admin features.</small>
                    </div>
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="form-group mb-3">
                            <label for="email">Email</label>
                            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="password">Password</label>
                            <InputText id="password" @bind-Value="loginModel.Password" class="form-control" type="password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>
                        
                        <div class="form-group mb-3">
                            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                                @if(isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Loading...</span>
                                }
                                else
                                {
                                    <span>Login</span>
                                }
                            </button>
                        </div>
                        
                        @if(!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }
                        
                        <div class="text-center">
                            <p>Don't have an account? <a href="register">Register</a></p>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; } = string.Empty;
    }
    
    private LoginModel loginModel = new LoginModel();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    
    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            var result = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            
            if (result)
            {
                // Navigate to dashboard on successful login
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid email or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}