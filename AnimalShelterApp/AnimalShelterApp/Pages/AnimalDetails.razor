@page "/animals/details/{AnimalId}"
@using AnimalShelterApp.Services
@using AnimalShelterApp.Shared
@inject FirestoreService FirestoreService
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<h3>Animal Details</h3>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (animal == null)
{
    <div class="alert alert-danger">
        Animal not found. It may have been removed. <a href="/animals" class="alert-link">Return to list.</a>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-4">
            @if (!string.IsNullOrEmpty(animal.PhotoUrl))
            {
                <img src="@animal.PhotoUrl" class="img-fluid rounded" alt="Photo of @animal.Name">
            }
            else
            {
                <div class="bg-light d-flex justify-content-center align-items-center rounded" style="height: 250px;">
                    <span class="oi oi-image text-muted" style="font-size: 4rem;"></span>
                </div>
            }
        </div>
        <div class="col-md-8">
            <h2>@animal.Name <small class="text-muted">(@animal.Id)</small></h2>
            <hr />
            <dl class="row">
                <dt class="col-sm-3">Species</dt>
                <dd class="col-sm-9">@animal.Species</dd>

                <dt class="col-sm-3">Breed</dt>
                <dd class="col-sm-9">@animal.Breed</dd>

                <dt class="col-sm-3">Color</dt>
                <dd class="col-sm-9">@animal.Color</dd>

                <dt class="col-sm-3">Date of Birth</dt>
                <dd class="col-sm-9">@animal.DateOfBirth?.ToShortDateString()</dd>

                <dt class="col-sm-3">Weight</dt>
                <dd class="col-sm-9">
                    @if (animal.Weight.HasValue)
                    {
                        @($"{animal.Weight:F1} {animal.WeightUnit}")
                    }
                    else
                    {
                        <span class="text-muted">Not recorded</span>
                    }
                </dd>

                <dt class="col-sm-3">Status</dt>
                <dd class="col-sm-9">
                    @if (animal.IsActive)
                    {
                        <span class="badge bg-success">In Shelter</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">Inactive</span>
                    }
                </dd>
            </dl>
            <button class="btn btn-primary" @onclick="() => NavigateToEdit(animal.Id)">Edit Animal</button>
        </div>
    </div>

    <hr />

    <h4>Medication Schedule</h4>
    @if (scheduledDoses == null)
    {
        <p><em>Loading schedule...</em></p>
    }
    else if (!scheduledDoses.Any())
    {
        <p>No medications scheduled for this animal.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Medication</th>
                    <th>Dosage</th>
                    <th>Time</th>
                    <th>Schedule</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dose in scheduledDoses)
                {
                    var medication = medications?.FirstOrDefault(m => m.Id == dose.MedicationId);
                    <tr>
                        <td>
                            <div>
                                <strong>@(medication?.Name ?? "Unknown")</strong>
                                @if (medication != null && (!string.IsNullOrEmpty(medication.StorageInstructions) || !string.IsNullOrEmpty(medication.HandlingInstructions)))
                                {
                                    <div class="mt-1">
                                        @if (!string.IsNullOrEmpty(medication.StorageInstructions))
                                        {
                                            <small class="text-primary d-block">
                                                <i class="oi oi-home" title="Storage"></i> @medication.StorageInstructions
                                            </small>
                                        }
                                        @if (!string.IsNullOrEmpty(medication.HandlingInstructions))
                                        {
                                            <small class="text-warning d-block">
                                                <i class="oi oi-warning" title="Handling"></i> @medication.HandlingInstructions
                                            </small>
                                        }
                                    </div>
                                }
                            </div>
                        </td>
                        <td>@dose.Dosage</td>
                        <td>@dose.TimeOfDay</td>
                        <td>
                            <div>
                                <span class="badge bg-info">@GetRecurrenceDisplayText(dose)</span>
                                @if (dose.RecurrenceType == RecurrenceType.Weekly && dose.DaysOfWeek.Any())
                                {
                                    <div class="mt-1">
                                        <small class="text-muted">@GetDaysOfWeekText(dose.DaysOfWeek)</small>
                                    </div>
                                }
                                @if (dose.RecurrenceType == RecurrenceType.EveryXDays && dose.RecurrenceInterval > 1)
                                {
                                    <div class="mt-1">
                                        <small class="text-muted">Every @dose.RecurrenceInterval days</small>
                                    </div>
                                }
                            </div>
                        </td>
                        <td>@dose.Notes</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter]
    public string? AnimalId { get; set; }

    private Animal? animal;
    private List<ScheduledDose>? scheduledDoses;
    private List<Medication>? medications;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(AnimalId) || AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        animal = await FirestoreService.GetAnimalAsync(AuthService.CurrentUser.ShelterId, AnimalId, AuthService.Token);
        
        if (animal != null)
        {
            // Fetch medications and scheduled doses in parallel
            var medicationsTask = FirestoreService.GetMedicationsAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
            var scheduledDosesTask = FirestoreService.GetScheduledDosesForAnimalAsync(AuthService.CurrentUser.ShelterId, AnimalId, AuthService.Token);

            await Task.WhenAll(medicationsTask, scheduledDosesTask);

            medications = await medicationsTask;
            scheduledDoses = await scheduledDosesTask;
        }

        isLoading = false;
    }

    private void NavigateToEdit(string animalId)
    {
        NavigationManager.NavigateTo($"/animals/edit/{animalId}");
    }

    // Helper methods for displaying recurring patterns
    private string GetRecurrenceDisplayText(ScheduledDose dose)
    {
        return dose.RecurrenceType switch
        {
            RecurrenceType.Daily => "Daily",
            RecurrenceType.EveryXDays => dose.RecurrenceInterval == 2 ? "Every Other Day" : $"Every {dose.RecurrenceInterval} Days",
            RecurrenceType.Weekly => "Weekly",
            RecurrenceType.BiWeekly => "Bi-Weekly",
            RecurrenceType.Monthly => "Monthly",
            RecurrenceType.AsNeeded => "As Needed (PRN)",
            _ => "Unknown"
        };
    }

    private string GetDaysOfWeekText(List<DayOfWeek> daysOfWeek)
    {
        if (!daysOfWeek.Any()) return "";
        
        // Sort days starting with Sunday
        var sortedDays = daysOfWeek.OrderBy(d => (int)d).ToList();
        
        // Abbreviate day names for compact display
        var dayAbbreviations = sortedDays.Select(d => d switch
        {
            DayOfWeek.Sunday => "Sun",
            DayOfWeek.Monday => "Mon",
            DayOfWeek.Tuesday => "Tue",
            DayOfWeek.Wednesday => "Wed",
            DayOfWeek.Thursday => "Thu",
            DayOfWeek.Friday => "Fri",
            DayOfWeek.Saturday => "Sat",
            _ => d.ToString()
        });
        
        return string.Join(", ", dayAbbreviations);
    }
}