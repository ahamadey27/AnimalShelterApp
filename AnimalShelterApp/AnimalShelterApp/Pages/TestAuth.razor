@page "/testauth"
@using AnimalShelterApp.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<h3>Authentication Test</h3>

<div class="container">
    @if (isLoading)
    {
        <p><em>Loading...</em></p>
    }
    else if (AuthService.CurrentUser != null)
    {
        <div class="alert alert-success" role="alert">
            <h4 class="alert-heading">Authenticated! âœ“</h4>
            <p>You are successfully logged in.</p>
            <hr>
            <p class="mb-0"><strong>User ID:</strong> @AuthService.CurrentUser.Uid</p>
            <p class="mb-0"><strong>Email:</strong> @AuthService.CurrentUser.Email</p>
            <p class="mb-0"><strong>Display Name:</strong> @AuthService.CurrentUser.DisplayName</p>
            <p class="mb-0"><strong>Shelter ID:</strong> @AuthService.CurrentUser.ShelterId</p>
        </div>
        
        <button class="btn btn-primary" @onclick="TestGetProfile">Test Get Profile</button>
        <button class="btn btn-danger ml-2" @onclick="LogoutAsync">Logout</button>
        
        @if (testResult != null)
        {
            <div class="mt-3 @(testSuccess ? "alert alert-success" : "alert alert-danger")">
                <p>@testResult</p>
            </div>
        }
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">Not Authenticated</h4>
            <p>You are not logged in.</p>
            <hr>
            <p class="mb-0">Please <a href="login">login</a> or <a href="register">register</a> to continue.</p>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private string? testResult;
    private bool testSuccess = false;
    
    protected override Task OnInitializedAsync()
    {
        // The AuthService already has the user loaded if they're authenticated
        // No need to initialize anything here
        isLoading = false;
        return Task.CompletedTask;
    }
    
    private Task TestGetProfile()
    {
        try
        {
            // The current user profile is already available in AuthService.CurrentUser
            // No need for a separate method call
            if (AuthService.CurrentUser != null)
            {
                testResult = $"Profile is available for {AuthService.CurrentUser.DisplayName}";
                testSuccess = true;
            }
            else
            {
                testResult = "No user profile available";
                testSuccess = false;
            }
        }
        catch (Exception ex)
        {
            testResult = $"Error: {ex.Message}";
            testSuccess = false;
        }
        
        return Task.CompletedTask;
    }
    
    private Task LogoutAsync()
    {
        AuthService.Logout();
        NavigationManager.NavigateTo("/login");
        return Task.CompletedTask;
    }
}
