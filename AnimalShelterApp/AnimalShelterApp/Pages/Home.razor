@page "/"
@using System
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using AnimalShelterApp.Services
@using AnimalShelterApp.Shared
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject FirestoreService FirestoreService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<PageTitle>Home</PageTitle>

<h1>Welcome to the Animal Shelter App!</h1>

<AuthorizeView>
    <Authorized>
        <h4>Hello, @context.User.Identity?.Name!</h4>
        <p>You are logged in and can now manage your shelter's animals and their medications.</p>
        <p>Use the navigation menu to get started.</p>
    </Authorized>
    <NotAuthorized>
        <h4>Please log in or register to continue.</h4>
        <p>This application helps you manage animals in your shelter, track their medications, and view daily schedules.</p>
        <div class="mt-4">
            <a href="login" class="btn btn-primary">Login</a>
            <a href="register" class="btn btn-secondary">Register</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Shelter? shelter = new Shelter(); 
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to auth state changes
        AuthService.OnAuthStateChanged += AuthStateChanged;

        await LoadShelterData();
    }
    
    private async Task LoadShelterData()
    {
        isLoading = true;
        
        // If logged in, get shelter information
        if (AuthService.CurrentUser != null && AuthService.Token != null)
        {
            try
            {
                // Get the shelter from FirestoreService using the injected service
                shelter = await FirestoreService.GetShelterAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
                
                // If shelter couldn't be loaded, use a placeholder
                if (shelter == null)
                {
                    shelter = new Shelter { 
                        Id = AuthService.CurrentUser.ShelterId,
                        Name = "Your Shelter" // Fallback placeholder
                    };
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading shelter: {ex.Message}");
                shelter = new Shelter { 
                    Id = AuthService.CurrentUser.ShelterId,
                    Name = "Your Shelter" // Fallback placeholder
                };
            }
        }
        
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task AuthStateChanged()
    {
        await LoadShelterData();
    }

    protected override void OnInitialized()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += HandleAuthStateChanged;
    }

    private async void HandleAuthStateChanged(Task<AuthenticationState> authState)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= AuthStateChanged;
        AuthenticationStateProvider.AuthenticationStateChanged -= HandleAuthStateChanged;
    }
}
