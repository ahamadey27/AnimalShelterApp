@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthService AuthService
@inject FirestoreService FirestoreService
@implements IDisposable

<PageTitle>Home</PageTitle>

<h1>Welcome to the Animal Shelter App!</h1>

<AuthorizeView>
    <Authorized>
        <h4>Hello, @context.User.Identity?.Name!</h4>

        @if (isLoading)
        {
            <p><em>Loading shelter details...</em></p>
        }
        else if (shelter != null)
        {
            <h5>Welcome to @shelter.Name!</h5>
        }
        
        <p>Use the navigation menu to get started.</p>
        <p>Enter the following details to sign in and interact with the app</p>
        <ul>
        <li>Email: <b>hamadey@gmail.com</b></li>
        <li>Password: <b>Password123</b></li>
        </ul>

    </Authorized>
    <NotAuthorized>
        <h4>Please log in or register to continue.</h4>
        <p>This application helps you manage animals in your shelter, track their medications, and view daily schedules.</p>
        <div class="mt-4">
            <a href="login" class="btn btn-primary">Login</a>
            <a href="register" class="btn btn-secondary">Register</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Shelter? shelter;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the correct event
        AuthenticationStateProvider.AuthenticationStateChanged += HandleAuthStateChanged;
        // Load initial data
        await LoadShelterData();
    }

    private async Task LoadShelterData()
    {
        isLoading = true;

        // Use the injected AuthService to get user and token info
        var currentUser = AuthService.CurrentUser;
        var token = AuthService.Token;

        if (currentUser != null && token != null)
        {
            try
            {
                shelter = await FirestoreService.GetShelterAsync(currentUser.ShelterId, token);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading shelter: {ex.Message}");
            }
        }
        
        isLoading = false;
    }

    // This method now handles the event from the AuthenticationStateProvider
    private async void HandleAuthStateChanged(Task<AuthenticationState> task)
    {
        await LoadShelterData();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Unsubscribe from the correct event
        AuthenticationStateProvider.AuthenticationStateChanged -= HandleAuthStateChanged;
    }
}
