@page "/"
@using System
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using AnimalShelterApp.Services
@using AnimalShelterApp.Shared
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject FirestoreService FirestoreService
@implements IDisposable

<h1>Home</h1>

@if (AuthService.CurrentUser != null)
{
    <div class="container">
        <div class="jumbotron">
            <h1 class="display-4">Welcome to Pet Medication Tracker!</h1>
            @if (isLoading)
            {
                <p>Loading shelter information...</p>
            }
            else
            {
                <p class="lead">
                    Hello, @AuthService.CurrentUser.DisplayName! This dashboard will help you track medications for all animals in @shelter?.Name.
                </p>
            }
            <hr class="my-4">
            <p>
                Get started by adding animals and their medication schedules. Then use the main dashboard to log doses as they're administered.
            </p>
            <div class="mt-4">
                <a class="btn btn-primary btn-lg me-2" href="animals">Manage Animals</a>
                <a class="btn btn-info btn-lg" href="medications">Manage Medications</a>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="jumbotron">
            <h1 class="display-4">Welcome to Pet Medication Tracker!</h1>
            <p class="lead">
                The easiest way to track medication administration for animal shelters and rescues.
            </p>
            <hr class="my-4">
            <p>
                Please log in or create a new account to get started.
            </p>
            <div class="mt-4">
                <a class="btn btn-primary btn-lg me-2" href="login">Login</a>
                <a class="btn btn-success btn-lg" href="register">Create Account</a>
            </div>
        </div>
    </div>
}

@code {
    private Shelter? shelter = new Shelter(); 
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to auth state changes
        AuthService.OnAuthStateChanged += AuthStateChanged;

        await LoadShelterData();
    }
    
    private async Task LoadShelterData()
    {
        isLoading = true;
        
        // If logged in, get shelter information
        if (AuthService.CurrentUser != null && AuthService.Token != null)
        {
            try
            {
                // Get the shelter from FirestoreService using the injected service
                shelter = await FirestoreService.GetShelterAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
                
                // If shelter couldn't be loaded, use a placeholder
                if (shelter == null)
                {
                    shelter = new Shelter { 
                        Id = AuthService.CurrentUser.ShelterId,
                        Name = "Your Shelter" // Fallback placeholder
                    };
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading shelter: {ex.Message}");
                shelter = new Shelter { 
                    Id = AuthService.CurrentUser.ShelterId,
                    Name = "Your Shelter" // Fallback placeholder
                };
            }
        }
        
        isLoading = false;
        StateHasChanged();
    }
    
    private async void AuthStateChanged()
    {
        await LoadShelterData();
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= AuthStateChanged;
    }
}
