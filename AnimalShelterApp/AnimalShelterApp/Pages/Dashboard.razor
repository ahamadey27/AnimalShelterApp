@page "/dashboard"
@using AnimalShelterApp.Services
@using AnimalShelterApp.Shared
@using System.Globalization
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject FirestoreService FirestoreService
@inject IJSRuntime JSRuntime
@using System.Linq

<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="d-flex align-items-center gap-2">
        <button class="btn btn-outline-secondary btn-sm" @onclick="PreviousDay" title="Previous day">
            <i class="bi bi-chevron-left"></i>
        </button>
    <h3 class="mb-0">@GetHeaderText()</h3>
        <button class="btn btn-outline-secondary btn-sm" @onclick="NextDay" title="Next day">
            <i class="bi bi-chevron-right"></i>
        </button>
    </div>
    <span class="fs-5 text-muted">@selectedDate.ToLongDateString()</span>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center mt-5">
        <div class="spinner-border" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <div class="row">
        <!-- Overdue Column -->
        <div class="col-md-4">
            <h4>Overdue (@overdueDoses.Count)</h4>
            <div class="list-group">
                @foreach (var dose in overdueDoses)
                {
                    <div class="list-group-item list-group-item-action bg-danger-subtle mb-2 border-danger">
                        @DoseCard("Log as Given")(dose)
                    </div>
                }
                @if (!overdueDoses.Any()) { <p class="text-muted">No overdue doses.</p> }
            </div>
        </div>

        <!-- Upcoming Column -->
        <div class="col-md-4">
            <h4>Upcoming (@upcomingDoses.Count)</h4>
            <div class="list-group">
                @foreach (var dose in upcomingDoses)
                {
                    <div class="list-group-item list-group-item-action mb-2">
                        @DoseCard("Log as Given")(dose)
                    </div>
                }
                @if (!upcomingDoses.Any()) { <p class="text-muted">No upcoming doses.</p> }
            </div>
        </div>

        <!-- Completed Column -->
        <div class="col-md-4">
            <h4>Completed (@completedDoses.Count)</h4>
            <div class="list-group">
                @foreach (var dose in completedDoses)
                {
                    <div class="list-group-item list-group-item-action bg-success-subtle mb-2 border-success">
                        @DoseCard("Logged")(dose)
                    </div>
                }
                @if (!completedDoses.Any()) { <p class="text-muted">No doses logged yet today.</p> }
            </div>
        </div>
    </div>
}

@code {
    // This is a "template" for rendering the dose card UI
    private RenderFragment<DashboardDoseViewModel> DoseCard(string buttonText) => (dose) =>@<div class="d-flex w-100 justify-content-between">
        <div>
            <h5 class="mb-1">@dose.MedicationName</h5>
            <p class="mb-1">For: <strong>@dose.AnimalName</strong> (@dose.Dosage)</p>
            <small class="text-muted">Scheduled for @FormatScheduleTime(dose.TimeOfDay)</small>
            @if(dose.TimeAdministered.HasValue)
            {
                <small class="d-block text-success-emphasis">Given at @dose.TimeAdministered.Value.ToString("h:mm tt")</small>
            }
        </div>
        <div class="d-flex flex-column align-items-center justify-content-center">
            @if (buttonText == "Logged")
            {
                <button class="btn btn-primary mb-1" disabled>
                    @buttonText
                </button>
                <button class="btn btn-outline-warning btn-sm" 
                        @onclick="() => UndoDoseLog(dose)"
                        title="Undo this medication log">
                    <i class="bi bi-arrow-counterclockwise"></i> Undo
                </button>
            }
            else
            {
                <button class="btn btn-primary" 
                        @onclick="() => LogDoseAsGiven(dose)">
                    @buttonText
                </button>
            }
        </div>
    </div>;

    private List<DashboardDoseViewModel> overdueDoses = new();
    private List<DashboardDoseViewModel> upcomingDoses = new();
    private List<DashboardDoseViewModel> completedDoses = new();
    
    private bool isLoading = true;
    private string? errorMessage;
    private DateTime selectedDate = DateTime.Today;

    // A special class to hold the combined data for our view
    public class DashboardDoseViewModel
    {
        public string ScheduledDoseId { get; set; } = "";
        public string AnimalId { get; set; } = "";
        public string AnimalName { get; set; } = "Unknown Animal";
        public string MedicationId { get; set; } = "";
        public string MedicationName { get; set; } = "Unknown Medication";
        public string Dosage { get; set; } = "";
        public string TimeOfDay { get; set; } = "";
        public string Notes { get; set; } = "";
        public DateTime? TimeAdministered { get; set; }
        public string LogId { get; set; } = ""; // Add this to track the log entry ID
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        await LoadDashboardDataAsync();
    }

    private async Task LoadDashboardDataAsync()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // Fetch all required data in parallel for speed
            var scheduledDosesTask = FirestoreService.GetAllScheduledDosesAsync(AuthService.CurrentUser!.ShelterId, AuthService.Token!);
            var todaysLogsTask = FirestoreService.GetDoseLogsForDateAsync(AuthService.CurrentUser!.ShelterId, selectedDate, AuthService.Token!);
            var animalsTask = FirestoreService.GetAnimalsAsync(AuthService.CurrentUser!.ShelterId, AuthService.Token!);
            var medicationsTask = FirestoreService.GetMedicationsAsync(AuthService.CurrentUser!.ShelterId, AuthService.Token!);

            await Task.WhenAll(scheduledDosesTask, todaysLogsTask, animalsTask, medicationsTask);

            var allScheduledDoses = await scheduledDosesTask;
            var todaysLogs = await todaysLogsTask;
            var animals = (await animalsTask).ToDictionary(a => a.Id);
            var medications = (await medicationsTask).ToDictionary(m => m.Id);

            // --- Process the data ---
            var loggedDoseIds = todaysLogs.Select(l => l.ScheduledDoseId).ToHashSet();
            var currentTime = TimeSpan.Parse(DateTime.Now.ToString("HH:mm"));

            // Reset collections
            overdueDoses.Clear();
            upcomingDoses.Clear();
            completedDoses.Clear();

            foreach (var dose in allScheduledDoses)
            {
                // Check if this dose should be active today based on start/end dates
                var today = selectedDate.Date;
                
                // Skip if start date is in the future
                if (dose.StartDate.Date > today)
                {
                    continue;
                }
                
                // Skip if end date is in the past (only for non-indefinite doses)
                if (!dose.IsIndefinite && dose.EndDate.HasValue && dose.EndDate.Value.Date < today)
                {
                    continue;
                }

                // Determine an effective time for display/classification:
                // Prefer TimeOfDay; if empty, fall back to the first TimeSlot (if any)
                var effectiveTime = !string.IsNullOrWhiteSpace(dose.TimeOfDay)
                    ? dose.TimeOfDay
                    : (dose.TimeSlots != null && dose.TimeSlots.Any() 
                        ? dose.TimeSlots.OrderBy(t => t).First()
                        : string.Empty);

                var viewModel = new DashboardDoseViewModel
                {
                    ScheduledDoseId = dose.Id,
                    AnimalId = dose.AnimalId,
                    AnimalName = animals.TryGetValue(dose.AnimalId, out var animal) ? animal.Name : "Unknown Animal",
                    MedicationId = dose.MedicationId,
                    MedicationName = medications.TryGetValue(dose.MedicationId, out var med) ? med.Name : "Unknown Medication",
                    Dosage = dose.Dosage,
                    TimeOfDay = effectiveTime,
                    Notes = dose.Notes
                };

                if (loggedDoseIds.Contains(dose.Id))
                {
                    var correspondingLog = todaysLogs.First(l => l.ScheduledDoseId == dose.Id);
                    viewModel.TimeAdministered = correspondingLog.TimeAdministered;
                    viewModel.LogId = correspondingLog.Id; // Store the log ID for undo functionality
                    completedDoses.Add(viewModel);
                }
                else
                {
                    // Classification depends on whether we're viewing today, a past date, or a future date
                    if (selectedDate.Date == DateTime.Today)
                    {
                        if (TimeSpan.TryParse(effectiveTime, out var scheduledTime) && scheduledTime < currentTime)
                        {
                            overdueDoses.Add(viewModel);
                        }
                        else
                        {
                            upcomingDoses.Add(viewModel);
                        }
                    }
                    else if (selectedDate.Date < DateTime.Today)
                    {
                        // For past dates, anything not logged is overdue
                        overdueDoses.Add(viewModel);
                    }
                    else
                    {
                        // For future dates, anything not logged is upcoming
                        upcomingDoses.Add(viewModel);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load dashboard data. " + ex.Message;
            Console.WriteLine($"Dashboard OnInitialized Error: {ex}"); // Added for better debugging
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PreviousDay()
    {
        selectedDate = selectedDate.AddDays(-1);
        await LoadDashboardDataAsync();
    }

    private async Task NextDay()
    {
        selectedDate = selectedDate.AddDays(1);
        await LoadDashboardDataAsync();
    }

    private string GetHeaderText()
    {
        if (selectedDate.Date == DateTime.Today)
        {
            return "Today's Medication";
        }
        else if (selectedDate.Date == DateTime.Today.AddDays(-1))
        {
            return "Yesterday's Medication";
        }
        else if (selectedDate.Date == DateTime.Today.AddDays(1))
        {
            return "Tomorrow's Medication";
        }
        else
        {
            // Example: Saturday September 13's Medication
            return $"{selectedDate:dddd MMMM d}'s Medication";
        }
    }

    private async Task LogDoseAsGiven(DashboardDoseViewModel dose)
    {
        if (AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token)) return;

        var log = new DoseLog
        {
            ScheduledDoseId = dose.ScheduledDoseId,
            AnimalId = dose.AnimalId,
            MedicationName = dose.MedicationName,
            Dosage = dose.Dosage,
            TimeAdministered = DateTime.Now,
            AdministeredByUid = AuthService.CurrentUser.Uid,
            WasGiven = true
        };

        bool success = await FirestoreService.CreateDoseLogAsync(AuthService.CurrentUser.ShelterId, log, AuthService.Token);

        if (success)
        {
            // This is the important part: after logging, we re-run the query
            // that needs the composite index. This should trigger the error in the console.
            Console.WriteLine("Log created. Now re-querying today's logs to trigger index creation link...");
            await FirestoreService.GetDoseLogsForDateAsync(AuthService.CurrentUser.ShelterId, DateTime.Today, AuthService.Token);

            // Move the dose to the completed list in the UI for immediate feedback
            var doseToMove = overdueDoses.FirstOrDefault(d => d.ScheduledDoseId == dose.ScheduledDoseId) ?? upcomingDoses.FirstOrDefault(d => d.ScheduledDoseId == dose.ScheduledDoseId);
            if (doseToMove != null)
            {
                overdueDoses.Remove(doseToMove);
                upcomingDoses.Remove(doseToMove);
                doseToMove.TimeAdministered = log.TimeAdministered;
                doseToMove.LogId = log.Id; // Store the log ID for undo functionality
                completedDoses.Add(doseToMove);
                completedDoses = completedDoses.OrderBy(d => d.TimeAdministered).ToList(); // Re-sort
            }
            StateHasChanged();
        }
        else
        {
            errorMessage = "Failed to log dose. Please try again.";
        }
    }

    private async Task UndoDoseLog(DashboardDoseViewModel dose)
    {
        if (AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token)) return;
        
        if (string.IsNullOrEmpty(dose.LogId))
        {
            errorMessage = "Cannot undo: Log ID not found.";
            return;
        }

        // Show confirmation dialog
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to undo the medication log for {dose.AnimalName}? This will move it back to the pending list.");
        
        if (!confirmed) return;

        bool success = await FirestoreService.DeleteDoseLogAsync(AuthService.CurrentUser.ShelterId, dose.LogId, AuthService.Token);

        if (success)
        {
            // Move the dose back to the appropriate list (overdue or upcoming)
            completedDoses.Remove(dose);
            
            // Reset the administered time and log ID
            dose.TimeAdministered = null;
            dose.LogId = "";
            
            // Determine if it should go to overdue or upcoming
            var currentTime = TimeSpan.Parse(DateTime.Now.ToString("HH:mm"));
            if (TimeSpan.TryParse(dose.TimeOfDay, out var scheduledTime) && scheduledTime < currentTime)
            {
                overdueDoses.Add(dose);
                overdueDoses = overdueDoses.OrderBy(d => d.TimeOfDay).ToList();
            }
            else
            {
                upcomingDoses.Add(dose);
                upcomingDoses = upcomingDoses.OrderBy(d => d.TimeOfDay).ToList();
            }
            
            StateHasChanged();
            
            // Optional: Show success message
            await JSRuntime.InvokeVoidAsync("alert", "Medication log has been undone successfully.");
        }
        else
        {
            errorMessage = "Failed to undo medication log. Please try again.";
        }
    }

    // Helper method to format time display consistently
    private string FormatScheduleTime(string timeOfDay)
    {
        if (string.IsNullOrEmpty(timeOfDay))
        {
            return "time not specified";
        }

        if (TimeSpan.TryParse(timeOfDay, out var timeSpan))
        {
            var dateTime = DateTime.Today.Add(timeSpan);
            return dateTime.ToString("h:mm tt"); // Formats as "8:00 AM" or "2:30 PM"
        }

        return timeOfDay; // Return original if parsing fails
    }
}