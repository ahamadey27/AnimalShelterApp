@page "/animals"
@using AnimalShelterApp.Services
@using AnimalShelterApp.Shared
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject FirestoreService FirestoreService

<h3>Animal Management</h3>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (animals == null || animals.Count == 0)
{
    <div class="alert alert-info" role="alert">
        <h4 class="alert-heading">No Animals Found</h4>
        <p>You don't have any animals in your shelter yet.</p>
        <hr>
        <div class="d-flex justify-content-end">
            <button class="btn btn-primary" @onclick="() => NavigateToAddAnimal()">Add Your First Animal</button>
        </div>
    </div>
}
else
{
    <div class="mb-3 d-flex justify-content-between align-items-center">
        <h5>Total Animals: @animals.Count</h5>
        <button class="btn btn-primary" @onclick="() => NavigateToAddAnimal()">
            <span class="oi oi-plus" aria-hidden="true"></span> Add Animal
        </button>
    </div>
    
    <div class="d-flex justify-content-end mb-2">
        <button class="btn btn-outline-secondary" @onclick="ToggleView" title="Toggle View">
            @if (isRowView)
            {
                <i class="bi bi-grid"></i> <!-- Grid icon for column view -->
            }
            else
            {
                <i class="bi bi-list"></i> <!-- List icon for row view -->
            }
        </button>
    </div>

    @if (isRowView)
    {
        <div class="row row-cols-1 g-4">
            @foreach (var animal in animals)
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="card-img-container">
                            @if (!string.IsNullOrEmpty(animal.PhotoUrl))
                            {
                                <img src="@animal.PhotoUrl" class="card-img-top animal-card-img" alt="@animal.Name">
                            }
                            else
                            {
                                <div class="card-img-placeholder d-flex justify-content-center align-items-center">
                                    <span class="oi oi-image text-muted" style="font-size: 3rem;"></span>
                                </div>
                            }
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@animal.Name</h5>
                            <p class="card-text"><strong>Species:</strong> @animal.Species</p>
                            <p class="card-text"><strong>Breed:</strong> @animal.Breed</p>
                            <p class="card-text"><strong>Age:</strong> @GetAnimalAge(animal)</p>
                        </div>
                        <div class="card-footer d-flex justify-content-between">
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => NavigateToAnimalDetails(animal.Id)">
                                Details
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => NavigateToEditAnimal(animal.Id)">
                                Edit
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Species</th>
                        <th>Breed</th>
                        <th>Age</th>
                        <th class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var animal in animals)
                    {
                        <tr>
                            <td>@animal.Name</td>
                            <td>@animal.Species</td>
                            <td>@animal.Breed</td>
                            <td>@GetAnimalAge(animal)</td>
                            <td class="text-end">
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => NavigateToAnimalDetails(animal.Id)">
                                    Details
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => NavigateToEditAnimal(animal.Id)">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

<style>
    .card-img-container {
        height: 200px;
        overflow: hidden;
    }
    
    .animal-card-img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }
    
    .card-img-placeholder {
        height: 200px;
        background-color: #f8f9fa;
    }
</style>

@code {
    private List<Animal>? animals;
    private bool isLoading = true;
    private bool isRowView = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token))
            {
                NavigationManager.NavigateTo("/login?redirectUri=/animals");
                return;
            }

            // Ensure shelter information is loaded
            if (AuthService.CurrentUser.Shelter == null && !string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId))
            {
                var shelter = await FirestoreService.GetShelterAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
                if (shelter != null)
                {
                    AuthService.CurrentUser.Shelter = shelter;
                }
            }

            if (!string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId))
            {
                animals = await FirestoreService.GetAnimalsAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
            }
            else
            {
                // Handle case where user has no shelter ID, maybe show a message
                animals = new List<Animal>();
                // Optionally, you could add a message to the user here.
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetAnimalAge(Animal animal)
    {
        if (!animal.DateOfBirth.HasValue)
        {
            return "Unknown";
        }
        
        var today = DateTime.Today;
        var age = today.Year - animal.DateOfBirth.Value.Year;
        
        // Adjust for the month/day if birthday hasn't occurred yet this year
        if (animal.DateOfBirth.Value.Date > today.AddYears(-age))
        {
            age--;
        }
        
        return $"{age} year{(age == 1 ? "" : "s")}";
    }
    
    private void NavigateToAddAnimal()
    {
        NavigationManager.NavigateTo("/animals/add");
    }
    
    private void NavigateToEditAnimal(string animalId)
    {
        NavigationManager.NavigateTo($"/animals/edit/{animalId}");
    }
    
    private void NavigateToAnimalDetails(string animalId)
    {
        NavigationManager.NavigateTo($"/animals/{animalId}");
    }

    private void ToggleView()
    {
        isRowView = !isRowView;
    }
}