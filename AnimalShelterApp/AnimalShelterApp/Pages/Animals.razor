@page "/animals"
@using AnimalShelterApp.Services
@using AnimalShelterApp.Shared
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject FirestoreService FirestoreService

<h3>Animal Management</h3>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (animals == null || animals.Count == 0)
{
    <div class="alert alert-info" role="alert">
        <h4 class="alert-heading">No Animals Found</h4>
        <p>You don't have any animals in your shelter yet.</p>
        <hr>
        <div class="d-flex justify-content-end">
            <button class="btn btn-primary" @onclick="() => NavigateToAddAnimal()">Add Your First Animal</button>
        </div>
    </div>
}
else
{
    <div class="mb-3 d-flex justify-content-between align-items-center">
        <h5>Total Animals: @animals.Count</h5>
        <button class="btn btn-primary" @onclick="() => NavigateToAddAnimal()">
            <span class="oi oi-plus" aria-hidden="true"></span> Add Animal
        </button>
    </div>
    
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var animal in animals)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="card-img-container">
                        @if (!string.IsNullOrEmpty(animal.PhotoUrl))
                        {
                            <img src="@animal.PhotoUrl" class="card-img-top animal-card-img" alt="@animal.Name">
                        }
                        else
                        {
                            <div class="card-img-placeholder d-flex justify-content-center align-items-center">
                                <span class="oi oi-image text-muted" style="font-size: 3rem;"></span>
                            </div>
                        }
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@animal.Name</h5>
                        <p class="card-text"><strong>Species:</strong> @animal.Species</p>
                        <p class="card-text"><strong>Breed:</strong> @animal.Breed</p>
                        <p class="card-text"><strong>Age:</strong> @GetAnimalAge(animal)</p>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <button class="btn btn-outline-primary btn-sm" @onclick="() => NavigateToAnimalDetails(animal.Id)">
                            Details
                        </button>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => NavigateToEditAnimal(animal.Id)">
                            Edit
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

<style>
    .card-img-container {
        height: 200px;
        overflow: hidden;
    }
    
    .animal-card-img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }
    
    .card-img-placeholder {
        height: 200px;
        background-color: #f8f9fa;
    }
</style>

@code {
    private List<Animal>? animals;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token))
        {
            NavigationManager.NavigateTo("/login?redirectUri=/animals");
            return;
        }

        // Ensure shelter information is loaded
        if (AuthService.CurrentUser.Shelter == null && !string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId))
        {
            var shelter = await FirestoreService.GetShelterAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
            if (shelter != null)
            {
                AuthService.CurrentUser.Shelter = shelter;
            }
        }

        if (!string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId))
        {
            animals = await FirestoreService.GetAnimalsAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
        }
        else
        {
            // Handle case where user has no shelter ID, maybe show a message
            animals = new List<Animal>();
            // Optionally, you could add a message to the user here.
        }
    }

    private string GetAnimalAge(Animal animal)
    {
        if (!animal.DateOfBirth.HasValue)
        {
            return "Unknown";
        }
        
        var today = DateTime.Today;
        var age = today.Year - animal.DateOfBirth.Value.Year;
        
        // Adjust for the month/day if birthday hasn't occurred yet this year
        if (animal.DateOfBirth.Value.Date > today.AddYears(-age))
        {
            age--;
        }
        
        return $"{age} year{(age == 1 ? "" : "s")}";
    }
    
    private void NavigateToAddAnimal()
    {
        NavigationManager.NavigateTo("/animals/add");
    }
    
    private void NavigateToEditAnimal(string animalId)
    {
        NavigationManager.NavigateTo($"/animals/edit/{animalId}");
    }
    
    private void NavigateToAnimalDetails(string animalId)
    {
        NavigationManager.NavigateTo($"/animals/details/{animalId}");
    }
}