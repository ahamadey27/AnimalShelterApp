@page "/animals"
@using AnimalShelterApp.Services
@using AnimalShelterApp.Shared
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject FirestoreService FirestoreService
@inject IJSRuntime JSRuntime


<h3>Animal Management</h3>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (animals == null || animals.Count == 0)
{
    <div class="alert alert-info" role="alert">
        <h4 class="alert-heading">No Animals Found</h4>
        <p>You don't have any animals in your shelter yet.</p>
        <hr>
        <div class="d-flex justify-content-end">
            <button class="btn btn-primary" @onclick="() => NavigateToAddAnimal()">Add Your First Animal</button>
        </div>
    </div>
}
else
{
    <div class="mb-3 d-flex justify-content-between align-items-center">
        <h5>Total Animals: @animals.Count</h5>
        <button class="btn btn-primary" @onclick="() => NavigateToAddAnimal()">
            <span class="oi oi-plus" aria-hidden="true"></span> Add Animal
        </button>
    </div>

    <div class="table-responsive">
        <table class="table table-sm align-middle">
            <thead>
                <tr>
                    <th></th> <!-- Photo -->
                    <th>Animal ID</th>
                    <th>Name</th>
                    <th>Species</th>
                    <th>Breed</th>
                    <th>Date of Birth</th>
                    <th>Color</th>
                    <th class="text-end">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var animal in animals)
                {
                    <tr>
                        <td style="width:48px;">
                            @if (!string.IsNullOrEmpty(animal.PhotoUrl))
                            {
                                <img src="@animal.PhotoUrl" class="img-thumbnail" style="width:40px; height:40px; object-fit:cover;" alt="@animal.Name" />
                            }
                            else
                            {
                                <span class="oi oi-image text-muted" style="font-size:2rem;"></span>
                            }
                        </td>
                        <td>@animal.Id</td>
                        <td>@animal.Name</td>
                        <td>@animal.Species</td>
                        <td>@animal.Breed</td>
                        <td>
                            @if (animal.DateOfBirth.HasValue)
                            {
                                @animal.DateOfBirth.Value.ToString("yyyy-MM-dd")
                            }
                            else
                            {
                                <span class="text-muted">Unknown</span>
                            }
                        </td>
                        <td>@animal.Color</td>
                        <td class="text-end">
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => NavigateToAnimalDetails(animal.Id)">Details</button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => NavigateToEditAnimal(animal.Id)">Edit</button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteAnimal(animal.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<style>
    .card-img-container {
        height: 200px;
        overflow: hidden;
    }
    .animal-card-img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }
    .card-img-placeholder {
        height: 200px;
        background-color: #f8f9fa;
    }
</style>

@code {
    private List<Animal>? animals;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.Token))
            {
                NavigationManager.NavigateTo("/login?redirectUri=/animals");
                return;
            }

            // Ensure shelter information is loaded
            if (AuthService.CurrentUser.Shelter == null && !string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId))
            {
                var shelter = await FirestoreService.GetShelterAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
                if (shelter != null)
                {
                    AuthService.CurrentUser.Shelter = shelter;
                }
            }

            if (!string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId))
            {
                animals = await FirestoreService.GetAnimalsAsync(AuthService.CurrentUser.ShelterId, AuthService.Token);
            }
            else
            {
                animals = new List<Animal>();
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetAnimalAge(Animal animal)
    {
        if (!animal.DateOfBirth.HasValue)
        {
            return "Unknown";
        }

        var today = DateTime.Today;
        var age = today.Year - animal.DateOfBirth.Value.Year;

        if (animal.DateOfBirth.Value.Date > today.AddYears(-age))
        {
            age--;
        }

        return $"{age} year{(age == 1 ? "" : "s")}";
    }

    private void NavigateToAddAnimal()
    {
        NavigationManager.NavigateTo("/animals/add");
    }

    private void NavigateToEditAnimal(string animalId)
    {
        NavigationManager.NavigateTo($"/animals/edit/{animalId}");
    }

    private void NavigateToAnimalDetails(string animalId)
    {
        NavigationManager.NavigateTo($"/animals/{animalId}");
    }

    private async Task DeleteAnimal(string animalId)
    {
        if (AuthService.CurrentUser == null || string.IsNullOrEmpty(AuthService.CurrentUser.ShelterId) || string.IsNullOrEmpty(AuthService.Token))
            return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this animal?");
        if (!confirmed) return;

        var success = await FirestoreService.DeleteAnimalAsync(AuthService.CurrentUser.ShelterId, animalId, AuthService.Token);
        if (success)
        {
            animals = animals?.Where(a => a.Id != animalId).ToList();
            StateHasChanged();
        }
        else
        {
            // Optionally show an error message
        }
    }
}