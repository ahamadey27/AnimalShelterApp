@page "/register"
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Create a New Account</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@registrationModel" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <h4 class="mb-3">User Information</h4>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="email">Email</label>
                                <InputText id="email" @bind-Value="registrationModel.Email" class="form-control" />
                                <ValidationMessage For="@(() => registrationModel.Email)" />
                            </div>
                            <div class="col-md-6">
                                <label for="displayName">Your Name</label>
                                <InputText id="displayName" @bind-Value="registrationModel.DisplayName" class="form-control" />
                                <ValidationMessage For="@(() => registrationModel.DisplayName)" />
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="password">Password</label>
                                <InputText id="password" @bind-Value="registrationModel.Password" class="form-control" type="password" />
                                <ValidationMessage For="@(() => registrationModel.Password)" />
                            </div>
                            <div class="col-md-6">
                                <label for="confirmPassword">Confirm Password</label>
                                <InputText id="confirmPassword" @bind-Value="registrationModel.ConfirmPassword" class="form-control" type="password" />
                                <ValidationMessage For="@(() => registrationModel.ConfirmPassword)" />
                            </div>
                        </div>
                        
                        <h4 class="mb-3 mt-4">Shelter Information</h4>
                        <div class="form-group mb-3">
                            <label for="shelterName">Shelter Name</label>
                            <InputText id="shelterName" @bind-Value="registrationModel.ShelterName" class="form-control" />
                            <ValidationMessage For="@(() => registrationModel.ShelterName)" />
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="shelterAddress">Shelter Address</label>
                            <InputText id="shelterAddress" @bind-Value="registrationModel.ShelterAddress" class="form-control" />
                            <ValidationMessage For="@(() => registrationModel.ShelterAddress)" />
                        </div>
                        
                        <div class="form-group mb-3">
                            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                                @if(isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Processing...</span>
                                }
                                else
                                {
                                    <span>Register</span>
                                }
                            </button>
                        </div>
                        
                        @if(!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }
                        
                        <div class="text-center">
                            <p>Already have an account? <a href="login">Login</a></p>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private class RegistrationModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }
        
        [Required(ErrorMessage = "Your name is required.")]
        public string DisplayName { get; set; }
        
        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; }
        
        [Required(ErrorMessage = "Confirm password is required.")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
        
        [Required(ErrorMessage = "Shelter name is required.")]
        public string ShelterName { get; set; }
        
        [Required(ErrorMessage = "Shelter address is required.")]
        public string ShelterAddress { get; set; }
    }
    
    private RegistrationModel registrationModel = new RegistrationModel();
    private bool isLoading = false;
    private string errorMessage;
    
    private async Task HandleRegistration()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            var result = await AuthService.RegisterAsync(
                registrationModel.Email,
                registrationModel.Password,
                registrationModel.DisplayName,
                registrationModel.ShelterName,
                registrationModel.ShelterAddress
            );
            
            if (result)
            {
                // Navigate to dashboard on successful registration
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Registration failed. This email may already be in use.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}